name: python

on:
  push:
  pull_request:

concurrency:
  cancel-in-progress: true
  group: ${{ github.workflow }}-${{ github.ref }}

jobs:
  # Generate the sdist first. We'll use it to created the wheels.
  sdist:
    name: Generate sdist
    runs-on: ubuntu-latest
    outputs:
      sdist_filename: ${{ steps.generate.outputs.filename }}

    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install build command
      run: python -m pip install build

    - name: Generate sdist
      id: generate
      run: |
        python -m build -s . --outdir dist
        echo "filename=$(ls dist)" >> "$GITHUB_OUTPUT"

    - name: Store sdist
      uses: actions/upload-artifact@v3
      with:
        name: sdist
        path: ./dist/*.tar.gz

  # Create the wheels. It'll use the sdist to confirm that we can ocnpile MaterialX from the sdist.
  wheels:
    name: Generate wheels
    runs-on: ${{ matrix.os }}
    needs: ['sdist']
    strategy:
      fail-fast: false
      matrix:
        python-version: ['37', '38', '39', '310']
        os: ['ubuntu-latest', 'macos-latest', 'windows-latest']

    steps:
    - name: Download sdist
      uses: actions/download-artifact@v3
      with:
        name: sdist
        path: sdist

    - name: Build wheels
      uses: pypa/cibuildwheel@v2.12.1
      with:
        # Build from the sdist. We want to make sure it's valid and works as expected.
        package-dir: ${{ github.workspace }}/sdist/${{ needs.sdist.outputs.sdist_filename }}
        output-dir: wheels
      env:
        CIBW_BUILD: 'cp${{ matrix.python-version }}-*'
        CIBW_SKIP: '*musllinux*'
        CIBW_ARCHS: 'auto64'
        CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
        CIBW_BUILD_VERBOSITY: 1
        CIBW_ENVIRONMENT: CMAKE_BUILD_PARALLEL_LEVEL=2
        # CIBW_BUILD_FRONTEND: build  # https://github.com/pypa/build
        MACOSX_DEPLOYMENT_TARGET: '10.13'

    - name: Store wheels
      uses: actions/upload-artifact@v3
      with:
        name: wheels
        path: ./wheels/*.whl

  test:
    name: Test wheels
    needs: ['wheels']
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10']
        os: ['ubuntu-latest', 'macos-latest', 'windows-latest']

    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Download wheels
      uses: actions/download-artifact@v3
      with:
        name: wheels
        path: wheels

    - name: Install wheel
      # Note that pip will install the right wheel. It's able to select the wheel based on the current
      # platform, python version, etc.
      run: python -m pip install wheels/*.whl

    - name: Python tests
      run: |
        python python/MaterialXTest/main.py
        python python/MaterialXTest/genshader.py
        python python/Scripts/mxupdate.py resources/Materials/TestSuite/stdlib/upgrade --yes
        python python/Scripts/mxvalidate.py resources/Materials/Examples/StandardSurface/standard_surface_marble_solid.mtlx --stdlib --verbose
        python python/Scripts/mxdoc.py --docType md libraries/pbrlib/pbrlib_defs.mtlx
        python python/Scripts/mxdoc.py --docType html libraries/bxdf/standard_surface.mtlx
        python python/Scripts/generateshader.py resources/Materials/Examples/StandardSurface --target glsl
        python python/Scripts/generateshader.py resources/Materials/Examples/StandardSurface --target osl
        python python/Scripts/generateshader.py resources/Materials/Examples/StandardSurface --target mdl
        python python/Scripts/generateshader.py resources/Materials/Examples/StandardSurface --target msl
