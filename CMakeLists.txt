project(MaterialX)
set(MATERIALX_MAJOR_VERSION 1)
set(MATERIALX_MINOR_VERSION 36)
set(MATERIALX_BUILD_VERSION 0)
set(MATERIALX_LIBRARY_VERSION ${MATERIALX_MAJOR_VERSION}.${MATERIALX_MINOR_VERSION}.${MATERIALX_BUILD_VERSION})

cmake_minimum_required(VERSION 3.1)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_POSITION_INDEPENDENT_CODE TRUE)
set(CMAKE_MACOSX_RPATH ON)
include(CheckCXXCompilerFlag)
include(CMakeDependentOption)
enable_testing()

option(MATERIALX_BUILD_PYTHON "Build the MaterialX Python package from C++ bindings. Requires Python 2.6 or greater." OFF)
option(MATERIALX_BUILD_DOCS "Create HTML documentation using Doxygen. Requires that Doxygen be installed." OFF)
option(MATERIALX_INSTALL_PYTHON "Install the MaterialX Python package as a third-party library when the install target is built." ON)
option(MATERIALX_WARNINGS_AS_ERRORS "Interpret all compiler warnings as errors." OFF)
option(MATERIALX_BUILD_RENDER "Build the MaterialX Render module. " ON)
option(MATERIALX_TEST_RENDER "Run tests for MaterialX Render module. Requires a valid GPU setup for hardware dependent validation." OFF)
option(MATERIALX_BUILD_GEN_OSL "Build the OSL shader generator back-end." ON)
option(MATERIALX_BUILD_GEN_GLSL "Build the GLSL shader generator back-end." ON)
cmake_dependent_option(MATERIALX_BUILD_GEN_OGSFX "Build the OGSFX shader generator back-end." ON "MATERIALX_BUILD_GEN_GLSL" OFF)

set(MATERIALX_OSLC_EXECUTABLE "" CACHE FILEPATH 
    "Full path to the oslc binary.")
set(MATERIALX_TESTSHADE_EXECUTABLE "" CACHE FILEPATH 
    "Full path to the testshade binary.")
set(MATERIALX_TESTRENDER_EXECUTABLE "" CACHE FILEPATH 
    "Full path to the testrender binary.")
set(MATERIALX_OSL_INCLUDE_PATH "" CACHE PATH
    "Full path to osl include paths. e.g. location of stdosl.h")

set(MATERIALX_PYTHON_EXECUTABLE "" CACHE FILEPATH
    "Path to the Python executable (e.g. 'C:/Python27/python.exe').")
set(MATERIALX_PYTHON_INCLUDE_DIR "" CACHE PATH 
    "Path to the headers of the Python installation (e.g. 'C:/Python27/include').")
set(MATERIALX_PYTHON_LIBRARY "" CACHE FILEPATH
    "Path to the Python library file (e.g. 'C:/Python27/libs/python27.lib').")
set(MATERIALX_PYTHON_OCIO_DIR "" CACHE PATH
    "Path to a folder containing the default OCIO configuration to be packaged with MaterialX Python (e.g. 'D:/Projects/OpenColorIO-Configs/aces_1.0.3').")

mark_as_advanced(MATERIALX_BUILD_DOCS)
mark_as_advanced(MATERIALX_PYTHON_EXECUTABLE)
mark_as_advanced(MATERIALX_PYTHON_INCLUDE_DIR)
mark_as_advanced(MATERIALX_PYTHON_LIBRARY)
mark_as_advanced(MATERIALX_PYTHON_OCIO_DIR)
mark_as_advanced(MATERIALX_INSTALL_PYTHON)
mark_as_advanced(MATERIALX_WARNINGS_AS_ERRORS)
mark_as_advanced(MATERIALX_BUILD_RENDER)
mark_as_advanced(MATERIALX_TEST_RENDER)
mark_as_advanced(MATERIALX_OSLC_EXECUTABLE)
mark_as_advanced(MATERIALX_TESTSHADE_EXECUTABLE)
mark_as_advanced(MATERIALX_TESTRENDER_EXECUTABLE)
mark_as_advanced(MATERIALX_OSL_INCLUDE_PATH)
mark_as_advanced(MATERIALX_BUILD_GEN_OSL)
mark_as_advanced(MATERIALX_BUILD_GEN_GLSL)
mark_as_advanced(MATERIALX_BUILD_GEN_OGSFX)

set(PYTHON_INCLUDE_DIR ${MATERIALX_PYTHON_INCLUDE_DIR})
set(PYTHON_LIBRARY ${MATERIALX_PYTHON_LIBRARY})

add_definitions(-DMATERIALX_OSLC_EXECUTABLE=\"${MATERIALX_OSLC_EXECUTABLE}\")
add_definitions(-DMATERIALX_TESTSHADE_EXECUTABLE=\"${MATERIALX_TESTSHADE_EXECUTABLE}\")
add_definitions(-DMATERIALX_TESTRENDER_EXECUTABLE=\"${MATERIALX_TESTRENDER_EXECUTABLE}\")
add_definitions(-DMATERIALX_OSL_INCLUDE_PATH=\"${MATERIALX_OSL_INCLUDE_PATH}\")

# Adjust the default installation path
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
    set(CMAKE_INSTALL_PREFIX "${CMAKE_BINARY_DIR}/installed" CACHE PATH "Default install path" FORCE)
endif()

# Adjust compiler settings
if(MSVC)
    if(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
        string(REGEX REPLACE "/W[0-4]" "/W4" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
    else()
        add_compile_options(/W4)
    endif()
    if(MATERIALX_WARNINGS_AS_ERRORS)
        add_compile_options(/WX)
    endif()

    # Use /Z7 to avoid having pdbs
    if(CMAKE_CXX_FLAGS_DEBUG MATCHES "/Zi")
        string(REGEX REPLACE "/Zi" "/Z7" CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG}")
    else()
        set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /Z7")
    endif()
    if(CMAKE_CXX_FLAGS_RELEASE MATCHES "/Zi")
        string(REGEX REPLACE "/Zi" "/Z7" CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")
    else()
        set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /Z7")
    endif()
    if(CMAKE_CXX_FLAGS_RELWITHDEBINFO MATCHES "/Zi")
        string(REGEX REPLACE "/Zi" "/Z7" CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO}")
    else()
        set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /Z7")
    endif()
else()
    add_compile_options(-Wall -Wno-missing-braces)
    if(MATERIALX_WARNINGS_AS_ERRORS)
        add_compile_options(-Werror)
    endif()
    if(CMAKE_CXX_COMPILER_ID MATCHES Clang)
        CHECK_CXX_COMPILER_FLAG(-Wno-undefined-var-template UNDEFINED_VAR_TEMPLATE_FLAG)
        if(UNDEFINED_VAR_TEMPLATE_FLAG)
            add_compile_options(-Wno-undefined-var-template)
        endif()
    endif()
endif()

# Add subdirectories
add_subdirectory(source/MaterialXCore)
add_subdirectory(source/MaterialXFormat)
add_subdirectory(source/MaterialXGenShader)

if (MATERIALX_BUILD_GEN_OSL)
    add_definitions(-DMATERIALX_BUILD_GEN_OSL)
    add_subdirectory(source/MaterialXGenOsl)
endif(MATERIALX_BUILD_GEN_OSL)
if (MATERIALX_BUILD_GEN_GLSL)
    add_definitions(-DMATERIALX_BUILD_GEN_GLSL)
    add_subdirectory(source/MaterialXGenGlsl)
endif(MATERIALX_BUILD_GEN_GLSL)
if (MATERIALX_BUILD_GEN_OGSFX)
    add_definitions(-DMATERIALX_BUILD_GEN_OGSFX)
    add_subdirectory(source/MaterialXGenOgsFx)
endif(MATERIALX_BUILD_GEN_OGSFX)

if (MATERIALX_BUILD_RENDER)
    if (MATERIALX_TEST_RENDER)
        add_definitions(-DMATERIALX_TEST_RENDER)
    endif(MATERIALX_TEST_RENDER)
    add_definitions(-DMATERIALX_BUILD_RENDER)
    add_subdirectory(source/MaterialXRender)
endif(MATERIALX_BUILD_RENDER)

add_subdirectory(source/MaterialXTest)
add_subdirectory(documents)

if(MATERIALX_BUILD_PYTHON)
    add_subdirectory(source/PyMaterialX)
    add_subdirectory(python)
endif(MATERIALX_BUILD_PYTHON)
