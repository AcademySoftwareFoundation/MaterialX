#include "sxpbrlib/sx-osl/lib/sx_fresnel.osl"

void sx_coatingbsdf(color reflectance, float ior, float roughness, float anisotropy, normal N, vector U, string distribution, BSDF base, output BSDF result)
{
    float alpha = clamp(roughness*roughness, M_FLOAT_EPS, 1.0);
    float alphaX = alpha;
    float alphaY = alpha;
    if (anisotropy > 0.0)
    {
        float aspect = clamp(anisotropy, 0.0, 0.98);
        aspect = sqrt(1.0 - aspect);
        alphaX = min(alpha / aspect, 1.0);
        alphaY = alpha * aspect;
    }

    float eta = backfacing() ? 1.0 / ior : ior;

    // Calculate fresnel outside the microfacet closure since we need 
    // to attenuate the base layer according to fresnel
    //
    // Fresnel should be based on microfacet normal
    // but we have no access to that from here, so just use
    // view direction and surface normal instead
    //
    float NdotV = fabs(dot(N,-I));
    color F = reflectance * sx_fresnel_dielectric(NdotV, eta);

    // Set ior to 0.0 to disable the internal dielectric fresnel
    result = F * microfacet(distribution, N, U, alphaX, alphaY, 0.0, false) + base * (1.0 - F);
}
