<?xml version="1.0" encoding="UTF-8"?>
<materialx version="1.36">

  <!-- D A T A  T Y P E S -->

  <typedef name="BSDF" doc="Bidirectional scattering distribution function"/>
  <typedef name="EDF" doc="Emission distribution function"/>
  <typedef name="VDF" doc="Volume distribution function"/>
  <typedef name="roughnessinfo" doc="Surface rougness information for microfacet BDSFs"/>

  <!-- N O D E S -->

  <!--
    Node: <diffusebrdf>
    A BSDF node for diffuse reflection.
  -->
  <nodedef name="ND_diffusebrdf" node="diffusebrdf" type="BSDF" bsdf="R" nodegroup="pbr"
           doc="A BSDF node for diffuse reflections.">
    <input name="weight" type="float" value="1.0"/>
    <input name="color" type="color3" value="0.18, 0.18, 0.18"/>
    <input name="roughness" type="float" value="0.0"/>
    <input name="normal" type="vector3">
      <geomprop name="normal" type="vector3" space="world"/>
    </input>
  </nodedef>

  <!--
    Node: <diffusebtdf>
    A BSDF node for diffuse transmission.
  -->
  <nodedef name="ND_diffusebtdf" node="diffusebtdf" type="BSDF" bsdf="R" nodegroup="pbr"
           doc="A BSDF node for pure diffuse transmission.">
    <input name="weight" type="float" value="1.0"/>
    <input name="color" type="color3" value="1.0, 1.0, 1.0"/>
    <input name="normal" type="vector3">
      <geomprop name="normal" type="vector3" space="world"/>
    </input>
  </nodedef>

  <!--
    Node: <conductorbrdf>
    A reflection BSDF node based on a microfacet model and a Fresnel curve for conductors/metals.
  -->
  <nodedef name="ND_conductorbrdf" node="conductorbrdf" type="BSDF" bsdf="R" nodegroup="pbr"
           doc="A reflection BSDF node based on a microfacet model and a Fresnel curve for conductors/metals.">
    <input name="weight" type="float" value="1.0"/>
    <input name="reflectivity" type="color3" value="0.944 0.776 0.373"/>
    <input name="edgecolor" type="color3" value="0.998 0.981 0.751"/>
    <input name="roughness" type="roughnessinfo"/>
    <input name="normal" type="vector3">
      <geomprop name="normal" type="vector3" space="world"/>
    </input>
    <input name="tangent" type="vector3">
      <geomprop name="tangent" type="vector3" space="world"/>
    </input>
    <input name="distribution" type="string" value="ggx" enum="ggx"/>
  </nodedef>

  <!--
    Node: <dielectricbrdf>
    A reflection BSDF node based on a microfacet model and a Fresnel curve for dielectrics.
  -->
  <nodedef name="ND_dielectricbrdf" node="dielectricbrdf" type="BSDF" nodegroup="pbr"
           doc="A reflection BSDF node based on a microfacet model and a Fresnel curve for dielectrics.">
    <input name="weight" type="float" value="1.0"/>
    <input name="tint" type="color3" value="1.0, 1.0, 1.0"/>
    <input name="ior" type="float" value="1.52"/>
    <input name="roughness" type="roughnessinfo"/>
    <input name="normal" type="vector3">
      <geomprop name="normal" type="vector3" space="world"/>
    </input>
    <input name="tangent" type="vector3">
      <geomprop name="tangent" type="vector3" space="world"/>
    </input>
    <input name="distribution" type="string" value="ggx" enum="ggx"/>
    <input name="base" type="BSDF"/>
  </nodedef>

  <!--
    Node: <dielectricbtdf>
    A transmission BSDF node based on a microfacet model and a Fresnel curve for dielectrics.
  -->
  <nodedef name="ND_dielectricbtdf" node="dielectricbtdf" type="BSDF" bsdf="T" nodegroup="pbr"
           doc="A BSDF node for specular to glossy transmission.">
    <input name="weight" type="float" value="1.0"/>
    <input name="tint" type="color3" value="1.0, 1.0, 1.0"/>
    <input name="ior" type="float" value="1.52"/>
    <input name="roughness" type="roughnessinfo"/>
    <input name="normal" type="vector3">
      <geomprop name="normal" type="vector3" space="world"/>
    </input>
    <input name="tangent" type="vector3">
      <geomprop name="tangent" type="vector3" space="world"/>
    </input>
    <input name="distribution" type="string" value="ggx" enum="ggx"/>
    <input name="interior" type="VDF"/>
  </nodedef>

  <!--
    Node: <subsurfacebrdf>
    A subsurface scattering BSDF for true subsurface scattering.
  -->
  <nodedef name="ND_subsurfacebrdf" node="subsurfacebrdf" type="BSDF" bsdf="R" nodegroup="pbr"
           doc="A subsurface scattering BSDF for true subsurface scattering.">
    <input name="weight" type="float" value="1.0"/>
    <input name="color" type="color3" value="0.18, 0.18, 0.18"/>
    <input name="radius" type="vector3" value="1.0, 1.0, 1.0"/>
    <input name="anisotropy" type="float" value="0.0"/>
    <input name="normal" type="vector3">
      <geomprop name="normal" type="vector3" space="world"/>
    </input>
  </nodedef>

  <!--
    Node: <sheenbrdf>
    A microfacet BSDF for the back-scattering properties of cloth-like materials.
  -->
  <nodedef name="ND_sheenbrdf" node="sheenbrdf" type="BSDF" bsdf="R" nodegroup="pbr"
           doc="A microfacet BSDF for the back-scattering properties of cloth-like materials.">
    <input name="weight" type="float" value="1.0"/>
    <input name="color" type="color3" value="1.0, 1.0, 1.0"/>
    <input name="roughness" type="float" value="0.3"/>
    <input name="normal" type="vector3">
      <geomprop name="normal" type="vector3" space="world"/>
    </input>
    <input name="base" type="BSDF"/>
  </nodedef>

  <!--
    Node: <mixbsdf>
    A node for mixing BSDF's as: in1 * (1 − weight) + in2 * weight.
  -->
  <nodedef name="ND_mixbsdf" node="mixbsdf" type="BSDF" nodegroup="pbr"
           doc="A node for mixing BSDF's as: in1 * (1 − weight) + in2 * weight.">
    <input name="in1" type="BSDF" doc="First BSDF."/>
    <input name="in2" type="BSDF" doc="Second BSDF."/>
    <input name="weight" type="float" value="1.0" doc="Mixing weight, range [0, 1]."/>
  </nodedef>

  <!--
    Node: <scalebsdf>
    A node for adjusting the contribution of a BSDF with a weight.
  -->
  <nodedef name="ND_scalebsdf" node="scalebsdf" type="BSDF" nodegroup="pbr"
           doc="A node for adjusting the contribution of a BSDF with a weight.">
    <input name="in" type="BSDF" doc="The BSDF to scale."/>
    <input name="weight" type="color3" value="1.0, 1.0, 1.0" doc="Scaling weight."/>
  </nodedef>

  <!--
    Node: <uniformedf>
    An EDF node for uniform emission.
  -->
  <nodedef name="ND_uniformedf" node="uniformedf" type="EDF" nodegroup="pbr"
           doc=" An EDF node for uniform emission.">
    <input name="intensity" type="color3" value="1.0, 1.0, 1.0"/>
  </nodedef>

  <!--
    Node: <mixedf>
    A node for mixing EDF's as: in1 * (1 − weight) + in2 * weight.
  -->
  <nodedef name="ND_mixedf" node="mixedf" type="EDF" nodegroup="pbr"
           doc="A node for mixing EDF's as:  in1 * (1 − weight) + in2 * weight.">
    <input name="in1" type="EDF" doc="First EDF."/>
    <input name="in2" type="EDF" doc="Second EDF."/>
    <input name="weight" type="float" value="1.0" doc="Mixing weight, range [0, 1]."/>
  </nodedef>

  <!--
    Node: <surface>
    Construct a surface shader from scattering and emission distribution functions.
  -->
  <nodedef name="ND_surface" node="surface" type="surfaceshader" nodegroup="pbr"
           doc="A constructor node for the surfaceshader type.">
    <input name="bsdf" type="BSDF" doc="Distribution function for surface scattering."/>
    <input name="edf" type="EDF" doc="Distribution function for surface emission."/>
    <input name="opacity" type="float" value="1.0" doc="Surface cutout opacity"/>
  </nodedef>

  <!--
    Node: <mixsurface>
    Mix two surface shaders according to a weight
  -->
  <nodedef name="ND_mixsurface" node="mixsurface" type="surfaceshader" nodegroup="pbr"
           doc="Mix two surface shaders according to a weight.">
    <input name="in1" type="surfaceshader" doc="The first surface shader."/>
    <input name="in2" type="surfaceshader" doc="The second surface shader."/>
    <input name="weight" type="float" value="1.0" doc="Mixing weight, range [0, 1]."/>
  </nodedef>

  <!--
    Node: <light>
    Construct a light shader from emission distribution functions.
  -->
  <nodedef name="ND_light" node="light" type="lightshader" nodegroup="pbr"
           doc="A constructor node for the lightshader type.">
    <input name="edf" type="EDF" doc="Distribution function for light emission."/>
    <input name="intensity" type="float" value="1.0" doc="Multiplier for the light intensity"/>
    <input name="exposure" type="float" value="0.0" doc="Exposure control for the light intensity"/>
  </nodedef>

  <!--
    Node: <pointlight>
  -->
  <nodedef name="ND_pointlight" node="pointlight" type="lightshader" nodegroup="pbr"
           doc="A light shader node of 'point' type.">
    <input name="position" type="vector3" doc="Light source position."/>
    <input name="color" type="color3" doc="Light color."/>
    <input name="intensity" type="float" doc="Light intensity."/>
    <input name="decayRate" type="float" value="2.0" doc="Light decay exponent. Defaults to 2 for quadratic decay."/>
  </nodedef>

  <!--
    Node: <directionallight>
  -->
  <nodedef name="ND_directionallight" node="directionallight" type="lightshader" nodegroup="pbr"
           doc="A light shader node of 'directional' type.">
    <input name="direction" type="vector3" doc="Light source direction."/>
    <input name="color" type="color3" doc="Light color."/>
    <input name="intensity" type="float" doc="Light intensity."/>
  </nodedef>

  <!--
    Node: <spotlight>
  -->
  <nodedef name="ND_spotlight" node="spotlight" type="lightshader" nodegroup="pbr"
           doc="A light shader node of 'spot' type.">
    <input name="position" type="vector3" doc="Light source position."/>
    <input name="direction" type="vector3" doc="Light source direction."/>
    <input name="color" type="color3" doc="Light color."/>
    <input name="intensity" type="float" doc="Light intensity."/>
    <input name="decayRate" type="float" value="2.0" doc="Light decay exponent. Defaults to 2 for quadratic decay."/>
    <input name="innerConeAngle" type="float" doc="Inner cone angle."/>
    <input name="outerConeAngle" type="float" doc="Outer cone angle."/>
  </nodedef>

  <!--
    Node: <standard_surface>
  -->
  <nodedef name="ND_standard_surface_surfaceshader" node="standard_surface" type="surfaceshader" nodegroup="pbr"
           doc="A surface uber shader based on the Arnold standard surface shader">
      <input name="base" type="float" value="0.8" />
      <input name="base_color" type="color3" value="1, 1, 1" />
      <input name="diffuse_roughness" type="float" value="0" />
      <input name="specular" type="float" value="1" />
      <input name="specular_color" type="color3" value="1, 1, 1" />
      <input name="specular_roughness" type="float" value="0.1" />
      <input name="specular_IOR" type="float" value="1.52" />
      <input name="specular_anisotropy" type="float" value="0" />
      <input name="specular_rotation" type="float" value="0" />
      <input name="metalness" type="float" value="0" />
      <input name="transmission" type="float" value="0" />
      <input name="transmission_color" type="color3" value="1, 1, 1" />
      <input name="transmission_depth" type="float" value="0" />
      <input name="transmission_scatter" type="color3" value="0, 0, 0" />
      <input name="transmission_scatter_anisotropy" type="float" value="0" />
      <input name="transmission_dispersion" type="float" value="0" />
      <input name="transmission_extra_roughness" type="float" value="0" />
      <input name="subsurface" type="float" value="0" />
      <input name="subsurface_color" type="color3" value="1, 1, 1" />
      <input name="subsurface_radius" type="color3" value="1, 1, 1" />
      <input name="subsurface_scale" type="float" value="1" />
      <input name="thin_walled" type="boolean" value="false" />
      <input name="normal" type="vector3">
        <geomprop name="normal" type="vector3" space="world"/>
      </input>
      <input name="tangent" type="vector3">
        <geomprop name="tangent" type="vector3" space="world"/>
      </input>
      <input name="coat" type="float" value="0" />
      <input name="coat_color" type="color3" value="1, 1, 1" />
      <input name="coat_roughness" type="float" value="0.1" />
      <input name="coat_IOR" type="float" value="1.5" />
      <input name="coat_normal" type="vector3">
        <geomprop name="normal" type="vector3" space="world"/>
      </input>
      <input name="sheen" type="float" value="0" />
      <input name="sheen_color" type="color3" value="1, 1, 1" />
      <input name="sheen_roughness" type="float" value="0.3" />
      <input name="thin_film_thickness" type="float" value="0" />
      <input name="thin_film_IOR" type="float" value="1.5" />
      <input name="emission" type="float" value="0" />
      <input name="emission_color" type="color3" value="1, 1, 1" />
      <input name="opacity" type="color3" value="1, 1, 1" />
      <input name="caustics" type="boolean" value="false" />
      <input name="internal_reflections" type="boolean" value="true" />
      <input name="exit_to_background" type="boolean" value="false" />
      <input name="indirect_diffuse" type="float" value="1" />
      <input name="indirect_specular" type="float" value="1" />
  </nodedef>

  <!--
    Node: <backfacing>
  -->
  <nodedef name="ND_backfacing_boolean" node="backfacing" type="boolean" nodegroup="pbr"/>
  <nodedef name="ND_backfacing_integer" node="backfacing" type="integer" nodegroup="pbr"/>
  <nodedef name="ND_backfacing_float" node="backfacing" type="float" nodegroup="pbr"/>

  <!--
    Node: <roughness>
    Calculates anisotropic surface roughness from a scalar rougness and anisotropy parameterization.
  -->
  <nodedef name="ND_roughness" node="roughness" type="roughnessinfo" nodegroup="pbr"
           doc="Calculates anisotropic surface roughness from a scalar rougness/anisotropy parameterization.">
    <input name="roughness" type="float" value="0.0"/>
    <input name="anisotropy" type="float" value="0.0"/>
  </nodedef>

  <!--
    Node: <glossiness>
    Calculates anisotropic surface roughness from a scalar glossiness and anisotropy parameterization.
  -->
  <nodedef name="ND_glossiness" node="glossiness" type="roughnessinfo" nodegroup="pbr"
           doc="Calculates anisotropic surface roughness from a scalar glossiness/anisotropy parameterization.">
    <input name="glossiness" type="float" value="1.0"/>
    <input name="anisotropy" type="float" value="0.0"/>
  </nodedef>

  <!--
    Node: <complex_ior>
    A node for converting scientific/complex IOR to the artistic IOR used by the conductorbsdf node.
  -->
  <nodedef name="ND_complex_ior" node="complex_ior" type="multioutput" nodegroup="pbr"
           doc="A node for converting scientific/complex IOR to the artistic IOR used by the conductorbsdf node.">
    <input name="ior" type="vector3"/>
    <input name="extinction" type="vector3"/>
    <output name="reflectivity" type="color3"/>
    <output name="edgecolor" type="color3"/>
  </nodedef>

  <!--
    Node: <normalmap>
  -->
  <nodedef name="ND_normalmap" node="normalmap" type="vector3" nodegroup="pbr">
    <input name="in" type="vector3" value="0.5, 0.5, 1.0"/>
    <parameter name="tangentSpace" type="integer" value="1"/>
    <input name="normal" type="vector3">
      <geomprop name="normal" type="vector3" space="world"/>
    </input>
    <input name="tangent" type="vector3">
      <geomprop name="tangent" type="vector3" space="world"/>
    </input>
  </nodedef>

  <!--
    Node: <inputmap>
  -->
  <nodedef name="ND_inputmap_float" type="float" node="inputmap" nodegroup="pbr" sxclass="image">
    <input name="value" type="float" />
    <input name="file" type="filename" />
  </nodedef>
  <nodedef name="ND_inputmap_color3" type="color3" node="inputmap" nodegroup="pbr" sxclass="image">
    <input name="value" type="color3" />
    <input name="file" type="filename" />
  </nodedef>
  <nodedef name="ND_inputmap_vector3" type="vector3" node="inputmap" nodegroup="pbr" sxclass="image">
    <input name="value" type="vector3" />
    <input name="file" type="filename" />
  </nodedef>

  <!--
    Node: <srgb_linear>
  -->
  <nodedef name="ND_srgb_linear_color2" node="srgb_linear" type="color2" nodegroup="pbr">
    <input name="in" type="color2" />
  </nodedef>
  <nodedef name="ND_srgb_linear_color3" node="srgb_linear" type="color3" nodegroup="pbr">
    <input name="in" type="color3" />
  </nodedef>
  <nodedef name="ND_srgb_linear_color4" node="srgb_linear" type="color4" nodegroup="pbr">
    <input name="in" type="color4" />
  </nodedef>

</materialx>

