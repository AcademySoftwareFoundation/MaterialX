diff -crB v1.9/pugixml.cpp mtlx/pugixml.cpp
*** v1.9/pugixml.cpp	Fri Jul 19 08:52:49 2024
--- mtlx/pugixml.cpp	Fri Jul 19 08:53:11 2024
***************
*** 3419,3425 ****
  				{
  					mark = s; // Save this offset while searching for a terminator.
  
! 					PUGI__SKIPWS(); // Eat whitespace if no genuine PCDATA here.
  
  					if (*s == '<' || !*s)
  					{
--- 3419,3449 ----
  				{
  					mark = s; // Save this offset while searching for a terminator.
  
! 					// MaterialX: Enable newline tracking when processing whitespace.
! 					if (PUGI__OPTSET(parse_newlines))
! 					{
! 						if (PUGI__IS_CHARTYPE(*s, ct_space))
! 						{
! 							unsigned int lineCount = 0;
! 							while (PUGI__IS_CHARTYPE(*s, ct_space))
! 							{
! 								if (s[0] == '\n')
! 								{
! 									lineCount++;
! 								}
! 								++s;
! 							}
! 							for (size_t i=1; i<lineCount; i++)
! 							{
! 								PUGI__PUSHNODE(node_newline);
! 								PUGI__POPNODE();
! 							}
! 						}
! 					}
! 					else
! 					{
! 						PUGI__SKIPWS(); // Eat whitespace if no genuine PCDATA here.
! 					}
  
  					if (*s == '<' || !*s)
  					{
***************
*** 3922,3932 ****
  					++s;
  					break;
  				case '<':
! 					writer.write('&', 'l', 't', ';');
  					++s;
  					break;
  				case '>':
! 					writer.write('&', 'g', 't', ';');
  					++s;
  					break;
  				case '"':
--- 3946,3958 ----
  					++s;
  					break;
  				case '<':
! 					// MaterialX: Allow angle brackets in MTLX serialization.
! 					writer.write(*s);
  					++s;
  					break;
  				case '>':
! 					// MaterialX: Allow angle brackets in MTLX serialization.
! 					writer.write(*s);
  					++s;
  					break;
  				case '"':
***************
*** 4177,4182 ****
--- 4203,4213 ----
  				node_output_comment(writer, node->value ? node->value + 0 : PUGIXML_TEXT(""));
  				break;
  
+ 			// MaterialX: Handle newline output
+ 			case node_newline:
+ 				writer.write_string("");
+ 				break;
+ 
  			case node_pi:
  				writer.write('<', '?');
  				writer.write_string(node->name ? node->name + 0 : default_name);
***************
*** 4244,4251 ****
  				if ((indent_flags & indent_newline) && (flags & format_raw) == 0)
  					writer.write('\n');
  
! 				if ((indent_flags & indent_indent) && indent_length)
! 					text_output_indent(writer, indent, indent_length, depth);
  
  				if (PUGI__NODETYPE(node) == node_element)
  				{
--- 4275,4286 ----
  				if ((indent_flags & indent_newline) && (flags & format_raw) == 0)
  					writer.write('\n');
  
! 				// MaterialX: don't indent new line nodes
! 				if (PUGI__NODETYPE(node) != node_newline)
! 				{
! 					if ((indent_flags & indent_indent) && indent_length)
! 						text_output_indent(writer, indent, indent_length, depth);
! 				}
  
  				if (PUGI__NODETYPE(node) == node_element)
  				{
diff -crB v1.9/pugixml.hpp mtlx/pugixml.hpp
*** v1.9/pugixml.hpp	Fri Jul 19 08:52:49 2024
--- mtlx/pugixml.hpp	Fri Jul 19 08:53:11 2024
***************
*** 142,147 ****
--- 142,148 ----
  		node_pcdata,		// Plain character data, i.e. 'text'
  		node_cdata,			// Character data, i.e. '<![CDATA[text]]>'
  		node_comment,		// Comment tag, i.e. '<!-- text -->'
+ 		node_newline,		// MaterialX: A newline node
  		node_pi,			// Processing instruction, i.e. '<?name?>'
  		node_declaration,	// Document declaration, i.e. '<?xml version="1.0"?>'
  		node_doctype		// Document type declaration, i.e. '<!DOCTYPE doc>'
***************
*** 200,205 ****
--- 201,209 ----
  	// the document; this flag is only recommended for parsing documents with many PCDATA nodes in memory-constrained environments.
  	// This flag is off by default.
  	const unsigned int parse_embed_pcdata = 0x2000;
+ 
+ 	// MaterialX: This flag determines if newlines are added to the DOM tree. This flag is off by default.
+ 	const unsigned int parse_newlines = 0x4000;
  
  	// The default parsing mode.
  	// Elements, PCDATA and CDATA sections are added to the DOM tree, character/reference entities are expanded,
