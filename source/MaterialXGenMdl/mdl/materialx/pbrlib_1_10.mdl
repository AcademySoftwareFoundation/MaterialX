/*
 * Copyright (c) 2020, NVIDIA CORPORATION. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// MDL implementation of all types and nodes of
//     MaterialX Physically-Based Shading Nodes
//     Document version 1.39, June 29, 2024
//     see www.materialx.org 
// in
//     NVIDIA Material Definition Language 1.10
//     Language Specification
//     Document version 1.10.1, November 04, 2024
//     www.nvidia.com/mdl

mdl 1.10;

import ::anno::*;
import ::df::*;
import ::math::*;
import ::state::*;

import .::core::*;

// Changes since MDL 1.9
// - handle energy conservation for Oren-Nayar diffuse BSDF
// - add Zeltner mode for sheen BSDF
// - f82 handling for generalized schlick BSDF

// forward unchanged definitions from the previous versions
export using .::pbrlib_1_6 import mx_scatter_mode;
export using .::pbrlib_1_6 import mx_sheen_mode;
export using .::pbrlib_1_6 import mx_map_scatter_mode;
export using .::pbrlib_1_6 import mx_burley_diffuse_bsdf;
export using .::pbrlib_1_6 import mx_translucent_bsdf;
export using .::pbrlib_1_6 import mx_subsurface_bsdf;
export using .::pbrlib_1_6 import mx_thin_film_bsdf;
export using .::pbrlib_1_6 import mx_chiang_hair_bsdf;
export using .::pbrlib_1_6 import mx_uniform_edf;
export using .::pbrlib_1_6 import mx_conical_edf;
export using .::pbrlib_1_6 import mx_measured_edf;
export using .::pbrlib_1_6 import mx_absorption_vdf;
export using .::pbrlib_1_6 import mx_anisotropic_vdf;
export using .::pbrlib_1_6 import mx_light;
export using .::pbrlib_1_6 import mx_displacement_float;
export using .::pbrlib_1_6 import mx_displacement_vector3;
export using .::pbrlib_1_6 import volume_mix_return;
export using .::pbrlib_1_6 import volume_mix;
export using .::pbrlib_1_6 import mx_multiply_bsdf_color3;
export using .::pbrlib_1_6 import mx_multiply_bsdf_float;
export using .::pbrlib_1_6 import mx_multiply_edf_color3;
export using .::pbrlib_1_6 import mx_multiply_edf_float;
export using .::pbrlib_1_6 import mx_multiply_vdf_color3;
export using .::pbrlib_1_6 import mx_multiply_vdf_float;
export using .::pbrlib_1_6 import mx_roughness_anisotropy;
export using .::pbrlib_1_6 import mx_roughness_dual;
export using .::pbrlib_1_6 import mx_blackbody;
export using .::pbrlib_1_6 import mx_artistic_ior__result;
export using .::pbrlib_1_6 import mx_artistic_ior;
export using .::pbrlib_1_6 import mx_deon_hair_absorption_from_melanin;
export using .::pbrlib_1_6 import mx_chiang_hair_absorption_from_color;
export using .::pbrlib_1_6 import mx_chiang_hair_roughness__result;
export using .::pbrlib_1_6 import mx_chiang_hair_roughness;

export using .::pbrlib_1_7 import mx_add_bsdf;
export using .::pbrlib_1_7 import mx_add_edf;
export using .::pbrlib_1_7 import mx_mix_edf;
export using .::pbrlib_1_7 import mx_add_vdf;
export using .::pbrlib_1_7 import mx_generalized_schlick_edf;
export using .::pbrlib_1_7 import mx_volume;

export using .::pbrlib_1_9 import mx_mix_bsdf;
export using .::pbrlib_1_9 import mx_mix_vdf;
export using .::pbrlib_1_9 import mx_dielectric_bsdf;
export using .::pbrlib_1_9 import mx_conductor_bsdf;
export using .::pbrlib_1_9 import mx_surface;


export material mx_oren_nayar_diffuse_bsdf(
    float  mxp_weight    = 1.0,
    color  mxp_color     = color(0.18),
    float  mxp_roughness = 0.0,
    float3 mxp_normal    = state::normal(),
    uniform bool mxp_energy_compensation = false
) [[ 
    anno::usage( "materialx:bsdf") 
]]
= material(
    surface: material_surface( 
        scattering: df::weighted_layer(
            weight: mxp_weight,
            layer: df::diffuse_reflection_bsdf(
                tint: mxp_color,
                roughness: mxp_roughness,
                multiscatter_tint: mxp_energy_compensation ? color(1.0) : color(0.0)
            ),
            normal: mxp_normal
        )
    )
);

// To match with OSL, the sheen weight is scaled with average color as approximation of albedo.
// OSL uses the layer operator which mixes based on albedo.
export material mx_sheen_bsdf(
    float  mxp_weight    = 1.0,
    color  mxp_color     = color(1.0),
    float  mxp_roughness = 0.2,
    float3 mxp_normal    = state::normal(),
    uniform mx_sheen_mode mxp_mode = mx_sheen_mode_conty_kulla,
    material mxp_base = material(
                            surface: material_surface(
                                scattering: df::diffuse_reflection_bsdf(
                                ))) [[ anno::usage( "materialx:bsdf") ]]
) [[ 
    anno::usage( "materialx:bsdf") 
]]
= material(
    surface: material_surface( 
        // using the mix seems to fit OSL best, at least in the test cases
        scattering: df::weighted_layer(
            weight:  math::average(mxp_color) * mxp_weight,
            layer: mxp_mode == mx_sheen_mode_zeltner
                ? df::microflake_sheen_bsdf(
                    roughness: mxp_roughness,
                    tint: mxp_color,
                    multiscatter_tint: color(1.0),
                    multiscatter: mxp_base.surface.scattering
                )
                : df::sheen_bsdf(
                    roughness: mxp_roughness,
                    tint: mxp_color,
                    multiscatter_tint: color(1.0),
                    multiscatter: mxp_base.surface.scattering
                ),
            base: mxp_base.surface.scattering,
            normal: mxp_normal)),
    // we need to carry volume properties along for SSS
    ior:    mxp_base.ior,
    volume: mxp_base.volume
);

// helper to compute ior for generalized_schlick
color mx_f0_to_ior(color F0)
{
    float3 sqrtF0 = math::sqrt(math::clamp(float3(F0), 0.01, 0.99));
    return color((float3(1.0) + sqrtF0) / (float3(1.0) - sqrtF0));
}

export material mx_generalized_schlick_bsdf(
    float  mxp_weight    = 1.0,
    color  mxp_color0    = color(1.0),
    color  mxp_color82   = color(1.0),
    color  mxp_color90   = color(1.0),
    float  mxp_exponent  = 5.0,
    float2 mxp_roughness = float2(0.05),
    float3 mxp_normal    = state::normal(),
    float3 mxp_tangent   = state::texture_tangent_u(0),
    uniform core::mx_distribution_type mxp_distribution = core::mx_distribution_type_ggx [[ anno::unused() ]],
    uniform mx_scatter_mode mxp_scatter_mode = mx_scatter_mode_R,
    material mxp_base = material() [[ anno::usage( "materialx:bsdf") ]], // layering
    float mxp_top_weight = 1.0, // layering for cases where top is scaled using a mix
    float mxp_thinfilm_thickness = 0.0,
    float mxp_thinfilm_ior = 1.0
) [[ 
    anno::usage( "materialx:bsdf") 
]]
= let {
    float coatIor = mxp_thinfilm_ior <= 0.0 ? 1.0 : mxp_thinfilm_ior;
    bsdf ggx_model_R = df::microfacet_ggx_smith_bsdf(
        roughness_u: mxp_roughness.x,
        roughness_v: mxp_roughness.y,
        tint: color(1.0) * mxp_top_weight,
        multiscatter_tint: color(1.0) * mxp_top_weight,
        tangent_u: mxp_tangent,
        mode: df::scatter_reflect);

    bsdf ggx_model_T = df::microfacet_ggx_smith_bsdf(
        roughness_u: mxp_roughness.x,
        roughness_v: mxp_roughness.y,
        tint: color(1.0) * mxp_top_weight,
        multiscatter_tint: color(1.0) * mxp_top_weight,
        tangent_u: mxp_tangent,
        mode: df::scatter_transmit);

} in material(
    surface: material_surface(
        scattering: df::unbounded_mix(
            df::bsdf_component[](
            df::bsdf_component(
                mxp_weight,
                mxp_scatter_mode == mx_scatter_mode_T
                ? df::color_custom_curve_layer(
                    normal_reflectivity: mxp_color0,
                    grazing_reflectivity: mxp_color90,
                    f82_factor: mxp_color82,
                    exponent: mxp_exponent,
                    layer: bsdf(),
                    base: ggx_model_T,
                    normal: mxp_normal)
                : df::thin_film(
                    thickness: mxp_thinfilm_thickness,
                    ior: color(coatIor),
                    base: df::color_custom_curve_layer(
                        normal_reflectivity: mxp_color0,
                        grazing_reflectivity: mxp_color90,
                        f82_factor: mxp_color82,
                        exponent: mxp_exponent,
                        layer: ggx_model_R,
                        base: mxp_scatter_mode == mx_scatter_mode_R 
                            ? mxp_base.surface.scattering 
                            : ggx_model_T,
                        normal: mxp_normal))
                ),
            df::bsdf_component(
                1.0 - mxp_weight, 
                mxp_base.surface.scattering)
            )
        )
    ),
    ior: mx_f0_to_ior(mxp_color0),
    // we need to carry volume properties along for SSS
    volume: mxp_base.volume
);
