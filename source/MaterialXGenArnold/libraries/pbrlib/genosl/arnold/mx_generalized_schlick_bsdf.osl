#include "pbrlib/genosl/lib/mx_microfacet_specular.osl"

void mx_generalized_schlick_bsdf(float weight, color color0, color color90, float exponent, vector2 roughness, normal N, vector U, string distribution, string scatter_mode, BSDF base, thinfilm tf, output BSDF result)
{
    //
    // TODO: We need handling of transmission for generalized schlick
    //
    if (weight < M_FLOAT_EPS || scatter_mode == "T")
    {
        result = base;
        return;
    }

    float NdotV = fabs(dot(N,-I));
    color F = mx_fresnel_schlick(NdotV, color0, color90, exponent);
    float avgRoughness = mx_average_roughness(roughness);

    // Calculate directional albedo since we need
    // to attenuate the base layer according to this.
    color dirAlbedo = mx_ggx_directional_albedo(NdotV, avgRoughness, color0, color90);
    float avgDirAlbedo = dot(dirAlbedo, color(1.0 / 3.0));

    // NOTE: No compensation for multiscatter is done here since this is already
    // handled internally in Arnold's microfacet closure.

    // Set ior to 0.0 to disable the internal dielectric fresnel
    result = F * weight * microfacet(distribution, N, U, roughness.x, roughness.y, 0.0, false)
             + base * (1.0 - avgDirAlbedo * weight);
}
