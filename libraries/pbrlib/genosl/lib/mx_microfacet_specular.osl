#include "pbrlib/genosl/lib/mx_microfacet.osl"

// https://disney-animation.s3.amazonaws.com/library/s2012_pbs_disney_brdf_notes_v2.pdf
// Appendix B.2 Equation 15
vector mx_ggx_importance_sample_NDF(vector2 Xi, vector X, vector Y, vector N, float alphaX, float alphaY)
{
    float phi = 2.0 * M_PI * Xi.x;
    float tanTheta = sqrt(Xi.y / (1.0 - Xi.y));
    vector H = X * (tanTheta * alphaX * cos(phi)) +
               Y * (tanTheta * alphaY * sin(phi)) +
               N;
    return normalize(H);
}

// http://jcgt.org/published/0003/02/03/paper.pdf
// Equations 72 and 99
float mx_ggx_smith_G(float NdotL, float NdotV, float alpha)
{
    float alpha2 = mx_square(alpha);
    float lambdaL = sqrt(alpha2 + (1.0 - alpha2) * mx_square(NdotL));
    float lambdaV = sqrt(alpha2 + (1.0 - alpha2) * mx_square(NdotV));
    return 2.0 / (lambdaL / NdotL + lambdaV / NdotV);
}

// https://www.unrealengine.com/blog/physically-based-shading-on-mobile
color mx_ggx_directional_albedo_curve_fit(float NdotV, float roughness, color F0, color F90)
{
    vector4 c0 = vector4(-1, -0.0275, -0.572, 0.022);
    vector4 c1 = vector4( 1,  0.0425,  1.04, -0.04 );
    vector4 r = roughness * c0 + c1;
    float a004 = min(r.x * r.x, exp2(-9.28 * NdotV)) * r.x + r.y;
    vector2 AB = vector2(-1.04, 1.04) * a004 + vector2(r.z, r.w);
    return F0 * AB.x + F90 * AB.y;
}

color mx_ggx_directional_albedo_table_lookup(float NdotV, float roughness, color F0, color F90)
{
    vector2 st = vector2(NdotV, roughness);
    vector AB = texture(GGX_DIRECTIONAL_ALBEDO_TABLE, st.x, st.y);
    return F0 * AB[0] + F90 * AB[1];
}

// https://cdn2.unrealengine.com/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf
color mx_ggx_directional_albedo_importance_sample(float _NdotV, float roughness, color F0, color F90)
{
    float NdotV = clamp(_NdotV, M_FLOAT_EPS, 1.0);
    vector V = vector(sqrt(1.0 - mx_square(NdotV)), 0.0, NdotV);

    vector2 AB = vector2(0.0, 0.0);
    int SAMPLE_COUNT = 64;
    for (int i = 0; i < SAMPLE_COUNT; i++)
    {
        vector2 Xi = mx_spherical_fibonacci(i, SAMPLE_COUNT);

        // Compute the half vector and incoming light direction.
        vector H = mx_ggx_importance_sample_NDF(Xi, vector(1, 0, 0), vector(0, 1, 0), vector(0, 0, 1), roughness, roughness);
        vector L = -reflect(V, H);
        
        // Compute dot products for this sample.
        float NdotL = clamp(L[2], M_FLOAT_EPS, 1.0);
        float NdotH = clamp(H[2], M_FLOAT_EPS, 1.0);
        float VdotH = clamp(dot(V, H), M_FLOAT_EPS, 1.0);

        // Compute the Fresnel term.
        float Fc = mx_fresnel_schlick(VdotH, 0.0, 1.0);

        // Compute the geometric visibility term.
        float Gvis = mx_ggx_smith_G(NdotL, NdotV, roughness) * VdotH / (NdotH * NdotV);
        
        // Add the contribution of this sample.
        AB += vector2(Gvis * (1 - Fc), Gvis * Fc);
    }

    // Normalize integrated terms.
    AB /= SAMPLE_COUNT;

    // Return the final directional albedo.
    return F0 * AB.x + F90 * AB.y;
}

color mx_ggx_directional_albedo(float NdotV, float roughness, color F0, color F90)
{
#if GGX_DIRECTIONAL_ALBEDO_METHOD == 0
    return mx_ggx_directional_albedo_curve_fit(NdotV, roughness, F0, F90);
#elif GGX_DIRECTIONAL_ALBEDO_METHOD == 1
    return mx_ggx_directional_albedo_table_lookup(NdotV, roughness, F0, F90);
#else
    return mx_ggx_directional_albedo_importance_sample(NdotV, roughness, F0, F90);
#endif
}

float mx_ggx_directional_albedo(float NdotV, float roughness, float F0, float F90)
{
    color result = mx_ggx_directional_albedo(NdotV, roughness, color(F0), color(F90));
    return result[0];
}

float mx_ggx_directional_albedo(float NdotV, float roughness, float ior)
{
    color result = mx_ggx_directional_albedo(NdotV, roughness, color(mx_ior_to_f0(ior)), color(1.0));
    return result[0];
}

// https://blog.selfshadow.com/publications/turquin/ms_comp_final.pdf
// Equations 14 and 16
color mx_ggx_energy_compensation(float NdotV, float roughness, color Fss)
{
    float Ess = mx_ggx_directional_albedo(NdotV, roughness, 1.0, 1.0);
    return 1.0 + Fss * (1.0 - Ess) / Ess;
}

float mx_ggx_energy_compensation(float NdotV, float roughness, float Fss)
{
    color result = mx_ggx_energy_compensation(NdotV, roughness, color(Fss));
    return result[0];
}
