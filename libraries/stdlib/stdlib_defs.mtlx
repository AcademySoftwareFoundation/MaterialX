<?xml version="1.0"?>
<materialx version="1.39">
  <!--
    Copyright Contributors to the MaterialX Project
    SPDX-License-Identifier: Apache-2.0

    Declarations of standard data types and nodes included in the MaterialX specification.
  -->

  <!-- ======================================================================== -->
  <!-- Data types                                                               -->
  <!-- ======================================================================== -->

  <typedef name="boolean" zero="false" one="true"/>
  <typedef name="integer" zero="0" one="1"/>
  <typedef name="float" zero="0.0" one="1.0" half="0.5" />
  <typedef name="color3" semantic="color" zero="0.0, 0.0, 0.0" one="1.0, 1.0, 1.0" half="0.5, 0.5, 0.5" />
  <typedef name="color4" semantic="color" zero="0.0, 0.0, 0.0, 0.0" one="1.0, 1.0, 1.0, 1.0" half="0.5, 0.5, 0.5, 0.5" />
  <typedef name="vector2" zero="0.0, 0.0" one="1.0, 1.0" half="0.5, 0.5" />
  <typedef name="vector3" zero="0.0, 0.0, 0.0" one="1.0, 1.0, 1.0" half="0.5, 0.5, 0.5" />
  <typedef name="vector4" zero="0.0, 0.0, 0.0, 0.0" one="1.0, 1.0, 1.0, 1.0" half="0.5, 0.5, 0.5, 0.5" />
  <typedef name="matrix33" zero="0.0,0.0,0.0, 0.0,0.0,0.0, 0.0,0.0,0.0" one="1.0,0.0,0.0, 0.0,1.0,0.0, 0.0,0.0,1.0"/>
  <typedef name="matrix44" zero="0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0" one="1.0,0.0,0.0,0.0, 0.0,1.0,0.0,0.0, 0.0,0.0,1.0,0.0, 0.0,0.0,0.0,1.0"/>
  <typedef name="string" zero="" />
  <typedef name="filename" zero="" />
  <typedef name="geomname" />
  <typedef name="surfaceshader" semantic="shader" context="surface" zero="" />
  <typedef name="displacementshader" semantic="shader" context="displacement" zero="" />
  <typedef name="volumeshader" semantic="shader" context="volume" zero="" />
  <typedef name="lightshader" semantic="shader" context="light" zero="" />
  <typedef name="material" semantic="material" />
  <typedef name="none" />

  <typedef name="integerarray" />
  <typedef name="floatarray" />
  <typedef name="color3array" semantic="color" />
  <typedef name="color4array" semantic="color" />
  <typedef name="vector2array" />
  <typedef name="vector3array" />
  <typedef name="vector4array" />
  <typedef name="stringarray" />
  <typedef name="geomnamearray" />

  <!-- ======================================================================== -->
  <!-- Units and unit types                                                     -->
  <!-- ======================================================================== -->

  <unittypedef name="distance" />
  <unitdef name="UD_stdlib_distance" unittype="distance">
    <unit name="nanometer" scale="0.000000001" />
    <unit name="micron" scale="0.000001" />
    <unit name="millimeter" scale="0.001" />
    <unit name="centimeter" scale="0.01" />
    <unit name="inch" scale="0.0254" />
    <unit name="foot" scale="0.3048" />
    <unit name="yard" scale="0.9144" />
    <unit name="meter" scale="1.0" />
    <unit name="kilometer" scale="1000.0" />
    <unit name="mile" scale="1609.344" />
  </unitdef>

  <unittypedef name="angle" />
  <unitdef name="UD_stdlib_angle" unittype="angle">
    <unit name="degree" scale="1.0" />
    <unit name="radian" scale="57.295779513" />
  </unitdef>

  <!-- ======================================================================== -->
  <!-- Geometric Properties                                                     -->
  <!-- ======================================================================== -->

  <geompropdef name="Pobject" type="vector3" geomprop="position" space="object" />
  <geompropdef name="Nobject" type="vector3" geomprop="normal" space="object" />
  <geompropdef name="Tobject" type="vector3" geomprop="tangent" space="object" index="0" />
  <geompropdef name="Bobject" type="vector3" geomprop="bitangent" space="object" index="0" />
  <geompropdef name="Pworld" type="vector3" geomprop="position" space="world" />
  <geompropdef name="Nworld" type="vector3" geomprop="normal" space="world" />
  <geompropdef name="Tworld" type="vector3" geomprop="tangent" space="world" index="0" />
  <geompropdef name="Bworld" type="vector3" geomprop="bitangent" space="world" index="0" />
  <geompropdef name="UV0" type="vector2" geomprop="texcoord" index="0" />

  <!-- ======================================================================== -->
  <!-- Materials                                                                -->
  <!-- ======================================================================== -->

  <!-- Surface material -->
  <nodedef name="ND_surfacematerial" node="surfacematerial" nodegroup="material">
    <input name="surfaceshader" type="surfaceshader" value="" />
    <input name="backsurfaceshader" type="surfaceshader" value="" />
    <input name="displacementshader" type="displacementshader" value="" />
    <output name="out" type="material" />
  </nodedef>

  <!-- Volume material -->
  <nodedef name="ND_volumematerial" node="volumematerial" nodegroup="material">
    <input name="volumeshader" type="volumeshader" value="" />
    <output name="out" type="material" />
  </nodedef>

  <!-- ======================================================================== -->
  <!-- Shader nodes                                                             -->
  <!-- ======================================================================== -->

  <!--
    Node: <surface_unlit>
    An unlit surface shader node. Represents a surface that can emit and transmit light, 
    but does not receive illumination from light sources or other surfaces.
  -->
  <nodedef name="ND_surface_unlit" node="surface_unlit" nodegroup="shader" doc="Construct a surface shader from emission and transmission values.">
    <input name="emission" type="float" value="1.0" doc="Surface emission amount." />
    <input name="emission_color" type="color3" value="1,1,1" doc="Surface emission color." />
    <input name="transmission" type="float" value="0.0" doc="Surface transmission amount." />
    <input name="transmission_color" type="color3" value="1,1,1" doc="Surface transmission color." />
    <input name="opacity" type="float" value="1.0" doc="Surface cutout opacity." />
    <output name="out" type="surfaceshader" />
  </nodedef>

  <!-- ======================================================================== -->
  <!-- Texture nodes                                                            -->
  <!-- ======================================================================== -->

  <!--
    Node: <image>
    Samples data from a single image, or from a layer within a multi-layer image.
  -->
  <template name="TP_ND_image" varName="typeName" options="float, color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_image_@typeName@" node="image" nodegroup="texture2d">
      <input name="file" type="filename" value="" uiname="Filename" uniform="true" />
      <input name="layer" type="string" value="" uiname="Layer" uniform="true" />
      <input name="default" type="@typeName@" value="Value:zero" uiname="Default Color" />
      <input name="texcoord" type="vector2" defaultgeomprop="UV0" uiname="Texture Coordinates" />
      <input name="uaddressmode" type="string" value="periodic" enum="constant,clamp,periodic,mirror" uiname="Address Mode U" uniform="true" />
      <input name="vaddressmode" type="string" value="periodic" enum="constant,clamp,periodic,mirror" uiname="Address Mode V" uniform="true" />
      <input name="filtertype" type="string" value="linear" enum="closest,linear,cubic" uiname="Filter Type" uniform="true" />
      <input name="framerange" type="string" value="" uiname="Frame Range" uniform="true" />
      <input name="frameoffset" type="integer" value="0" uiname="Frame Offset" uniform="true" />
      <input name="frameendaction" type="string" value="constant" enum="constant,clamp,periodic,mirror" uiname="Frame End Action" uniform="true" />
      <output name="out" type="@typeName@" default="Value:zero" />
    </nodedef>
  </template>

  <!--
    Node: <tiledimage> Supplemental Node
    Samples data from a single image, with provisions for tiling and offsetting the image
    across uv space.
  -->
  <template name="TP_ND_tiledimage" varName="typeName" options="float, color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_tiledimage_@typeName@" node="tiledimage" nodegroup="texture2d">
      <input name="file" type="filename" value="" uniform="true" />
      <input name="default" type="@typeName@" value="Value:zero" />
      <input name="texcoord" type="vector2" defaultgeomprop="UV0" />
      <input name="uvtiling" type="vector2" value="1.0, 1.0" />
      <input name="uvoffset" type="vector2" value="0.0, 0.0" />
      <input name="realworldimagesize" type="vector2" value="1.0, 1.0" unittype="distance" />
      <input name="realworldtilesize" type="vector2" value="1.0, 1.0" unittype="distance" />
      <input name="filtertype" type="string" value="linear" enum="closest,linear,cubic" uniform="true" />
      <input name="framerange" type="string" value="" uniform="true" />
      <input name="frameoffset" type="integer" value="0" uniform="true" />
      <input name="frameendaction" type="string" value="constant" enum="constant,clamp,periodic,mirror" uniform="true" />
      <output name="out" type="@typeName@" default="Value:zero" />
    </nodedef>
  </template>

  <!--
    Node: <latlongimage> Supplemental Node
    Samples an equiangular map with adjustable rotation offset.
  -->
  <nodedef name="ND_latlongimage" node="latlongimage" nodegroup="texture2d">
    <input name="file" type="filename" value="" uniform="true" uiname="Filename" />
    <input name="default" type="color3" value="0.0, 0.0, 0.0" uiname="Default Color" />
    <input name="viewdir" type="vector3" value="0.0, 0.0, 1.0" uiname="View Direction" />
    <input name="rotation" type="float" value="0.0" unittype="angle" unit="degree" uimin="0" uimax="360" uiname="Longitude Offset" />
    <output name="out" type="color3" default="0.0, 0.0, 0.0" />
  </nodedef>
  
  <!--
    Node: <hextiledimage> Supplemental Node
    Samples data from a single image, with provisions for hex-tiling and randomizing the image
    across uv space.
  -->
  <template name="TP_ND_hextiledimage" varName="typeName" options="color3, color4">
    <nodedef name="ND_hextiledimage_@typeName@" node="hextiledimage" nodegroup="texture2d">
      <input name="file" type="filename" value="" uniform="true" />
      <input name="default" type="@typeName@" value="Value:zero" />
      <input name="texcoord" type="vector2" defaultgeomprop="UV0" />
      <input name="tiling" type="vector2" value="1.0, 1.0" />
      <input name="rotation" type="float" value="1.0" />
      <input name="rotationrange" type="vector2" value="0.0, 360.0" />
      <input name="scale" type="float" value="1.0" />
      <input name="scalerange" type="vector2" value="0.5, 2.0" />
      <input name="offset" type="float" value="1.0" />
      <input name="offsetrange" type="vector2" value="0.0, 1.0" />
      <input name="falloff" type="float" value="0.5" />
      <input name="falloffcontrast" type="float" value="0.5" />
      <input name="lumacoeffs" type="color3" value="0.2722287, 0.6740818, 0.0536895" enum="acescg, rec709, rec2020, rec2100" enumvalues="0.2722287,0.6740818,0.0536895, 0.2126,0.7152,0.0722, 0.2627,0.6780,0.0593, 0.2627,0.6780,0.0593" />
      <output name="out" type="@typeName@" default="Value:zero" />
    </nodedef>
  </template>

  <!--
    Node: <triplanarprojection> Supplemental Node
    Samples data from three images, or layers within multi-layer images, and projects a tiled
    representation of the images along each of the three respective coordinate axes, computing
    an adjustable weighted blend of the three samples using the geometric normal.
  -->
  <template name="TP_ND_triplanarprojection" varName="typeName" options="float, color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_triplanarprojection_@typeName@" node="triplanarprojection" nodegroup="texture3d">
      <input name="filex" type="filename" value="" uniform="true" />
      <input name="filey" type="filename" value="" uniform="true" />
      <input name="filez" type="filename" value="" uniform="true" />
      <input name="layerx" type="string" value="" uniform="true" />
      <input name="layery" type="string" value="" uniform="true" />
      <input name="layerz" type="string" value="" uniform="true" />
      <input name="default" type="@typeName@" value="Value:zero" />
      <input name="position" type="vector3" defaultgeomprop="Pobject" />
      <input name="normal" type="vector3" defaultgeomprop="Nobject" />
      <input name="upaxis" type="integer" value="2" enum="X,Y,Z" enumvalues="0,1,2" uniform="true" />
      <input name="blend" type="float" value="1.0" uimin="0.0" uimax="1.0" />
      <input name="filtertype" type="string" value="linear" enum="closest,linear,cubic" uniform="true" />
      <input name="framerange" type="string" value="" uniform="true" />
      <input name="frameoffset" type="integer" value="0" uniform="true" />
      <input name="frameendaction" type="string" value="constant" enum="constant,clamp,periodic,mirror" uniform="true" />
      <output name="out" type="@typeName@" default="Value:zero" />
    </nodedef>
  </template>

  <!-- ======================================================================== -->
  <!-- Procedural nodes                                                         -->
  <!-- ======================================================================== -->

  <!--
    Node: <constant>
    A constant value. When exposed as a public parameter, this is a way to create a
    value that can be accessed in multiple places in the opgraph.
  -->
  <template name="TP_ND_constant" varName="typeName" options="float, color3, color4, vector2, vector3, vector4, boolean, integer">
    <nodedef name="ND_constant_@typeName@" node="constant" nodegroup="procedural">
      <input name="value" type="@typeName@" value="Value:zero" />
      <output name="out" type="@typeName@" default="Value:zero" />
    </nodedef>
  </template>

  <template name="TP_ND_constant_uniform" varName="typeName" options="string, filename">
    <nodedef name="ND_constant_@typeName@" node="constant" nodegroup="procedural">
      <input name="value" type="@typeName@" value="Value:zero" uniform="true" />
      <output name="out" type="@typeName@" default="Value:zero" />
    </nodedef>
  </template>

  <template name="TP_ND_constant_matrix" varName="typeName" options="matrix33, matrix44">
    <nodedef name="ND_constant_@typeName@" node="constant" nodegroup="procedural">
      <input name="value" type="@typeName@" value="Value:one" />
      <output name="out" type="@typeName@" default="Value:one" />
    </nodedef>
  </template>

  <!--
    Node: <ramp>
    A ramp that supports up to 10 control points.
  -->
  <nodedef name="ND_ramp" node="ramp" nodegroup="procedural2d">
    <input name="texcoord" type="vector2" defaultgeomprop="UV0" />
    <input name="type" type="integer" value="0" enum="standard,radial,circular,box" enumvalues="0,1,2,3" />
    <input name="interpolation" type="integer" value="1" enum="linear,smooth,step" enumvalues="0,1,2" />
    <input name="num_intervals" type="integer" value="2" uimin="2" uimax="10" />
    <input name="interval1" type="float" value="0" uimin="0" uimax="1" />
    <input name="color1" type="color4" value="0,0,0,1" uimin="0,0,0,0" uimax="1,1,1,1" />
    <input name="interval2" type="float" value="1" uimin="0" uimax="1" />
    <input name="color2" type="color4" value="1,1,1,1" uimin="0,0,0,0" uimax="1,1,1,1" />
    <input name="interval3" type="float" value="1" uimin="0" uimax="1" />
    <input name="color3" type="color4" value="1,1,1,1" uimin="0,0,0,0" uimax="1,1,1,1" />
    <input name="interval4" type="float" value="1" uimin="0" uimax="1" />
    <input name="color4" type="color4" value="1,1,1,1" uimin="0,0,0,0" uimax="1,1,1,1" />
    <input name="interval5" type="float" value="1" uimin="0" uimax="1" />
    <input name="color5" type="color4" value="1,1,1,1" uimin="0,0,0,0" uimax="1,1,1,1" />
    <input name="interval6" type="float" value="1" uimin="0" uimax="1" />
    <input name="color6" type="color4" value="1,1,1,1" uimin="0,0,0,0" uimax="1,1,1,1" />
    <input name="interval7" type="float" value="1" uimin="0" uimax="1" />
    <input name="color7" type="color4" value="1,1,1,1" uimin="0,0,0,0" uimax="1,1,1,1" />
    <input name="interval8" type="float" value="1" uimin="0" uimax="1" />
    <input name="color8" type="color4" value="1,1,1,1" uimin="0,0,0,0" uimax="1,1,1,1" />
    <input name="interval9" type="float" value="1" uimin="0" uimax="1" />
    <input name="color9" type="color4" value="1,1,1,1" uimin="0,0,0,0" uimax="1,1,1,1" />
    <input name="interval10" type="float" value="1" uimin="0" uimax="1" />
    <input name="color10" type="color4" value="1,1,1,1" uimin="0,0,0,0" uimax="1,1,1,1" />
    <output name="out" type="color4" />
  </nodedef>

  <!--
    Node <ramp_gradient>
    A helper node that handles a single control point within a <ramp>.
  -->
  <nodedef name="ND_ramp_gradient" node="ramp_gradient" nodegroup="procedural2d">
    <input name="x" type="float" value="0" uimin="0" uimax="1" />
    <input name="interval1" type="float" value="0" uimin="0" uimax="1" />
    <input name="interval2" type="float" value="1" uimin="0" uimax="1" />
    <input name="color1" type="color4" value="0,0,0,1" uimin="0,0,0,0" uimax="1,1,1,1" />
    <input name="color2" type="color4" value="1,1,1,1" uimin="0,0,0,0" uimax="1,1,1,1" />
    <input name="interpolation" type="integer" value="1" enum="linear,smooth,step" enumvalues="0,1,2" />
    <input name="prev_color" type="color4" value="0,0,0,1" uimin="0,0,0,0" uimax="1,1,1,1" />
    <input name="interval_num" type="integer" value="1" />
    <input name="num_intervals" type="integer" value="2" />
    <output name="out" type="color4" />
  </nodedef>

  <!--
    Node: <ramplr>
    A left-to-right bilinear value ramp.
  -->
  <template name="TP_ND_ramplr" varName="typeName" options="float, color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_ramplr_@typeName@" node="ramplr" nodegroup="procedural2d">
      <input name="valuel" type="@typeName@" value="Value:zero" />
      <input name="valuer" type="@typeName@" value="Value:zero" />
      <input name="texcoord" type="vector2" defaultgeomprop="UV0" />
      <output name="out" type="@typeName@" default="Value:zero" />
    </nodedef>
  </template>

  <!--
    Node: <ramptb>
    A top-to-bottom bilinear value ramp.
  -->
  <template name="TP_ND_ramptb" varName="typeName" options="float, color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_ramptb_@typeName@" node="ramptb" nodegroup="procedural2d">
      <input name="valuet" type="@typeName@" value="Value:zero" />
      <input name="valueb" type="@typeName@" value="Value:zero" />
      <input name="texcoord" type="vector2" defaultgeomprop="UV0" />
      <output name="out" type="@typeName@" default="Value:zero" />
    </nodedef>
  </template>

  <!--
    Node: <ramp4> Supplemental Node
    A 4-corner bilinear value ramp.
  -->
  <template name="TP_ND_ramp4" varName="typeName" options="float, color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_ramp4_@typeName@" node="ramp4" nodegroup="procedural2d">
      <input name="valuetl" type="@typeName@" value="Value:zero" />
      <input name="valuetr" type="@typeName@" value="Value:zero" />
      <input name="valuebl" type="@typeName@" value="Value:zero" />
      <input name="valuebr" type="@typeName@" value="Value:zero" />
      <input name="texcoord" type="vector2" defaultgeomprop="UV0" />
      <output name="out" type="@typeName@" default="Value:zero" />
    </nodedef>
  </template>

  <!--
    Node: <splitlr>
    A left-right split matte, split at a specified u value.
  -->
  <template name="TP_ND_splitlr" varName="typeName" options="float, color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_splitlr_@typeName@" node="splitlr" nodegroup="procedural2d">
      <input name="valuel" type="@typeName@" value="Value:zero" uiname="Left" />
      <input name="valuer" type="@typeName@" value="Value:zero" uiname="Right" />
      <input name="center" type="float" value="0.5" uiname="Center" uimin="0.0" uimax="1.0" />
      <input name="texcoord" type="vector2" defaultgeomprop="UV0" />
      <output name="out" type="@typeName@" default="Value:zero" />
    </nodedef>
  </template>

  <!--
    Node: <splittb>
    A top-bottom split matte, split at a specified v value.
  -->
  <template name="TP_ND_splittb" varName="typeName" options="float, color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_splittb_@typeName@" node="splittb" nodegroup="procedural2d">
      <input name="valuet" type="@typeName@" value="Value:zero" uiname="Top" />
      <input name="valueb" type="@typeName@" value="Value:zero" uiname="Bottom" />
      <input name="center" type="float" value="0.5" uiname="Center" uimin="0.0" uimax="1.0" />
      <input name="texcoord" type="vector2" defaultgeomprop="UV0" />
      <output name="out" type="@typeName@" default="Value:zero" />
    </nodedef>
  </template>

  <!--
    Node: <noise2d>
    2D Perlin noise in 1, 2, 3 or 4 channels.
  -->
  <template name="TP_ND_noise2d" varName="typeName" options="float, vector2, vector3, vector4">
    <nodedef name="ND_noise2d_@typeName@" node="noise2d" nodegroup="procedural2d">
      <input name="amplitude" type="@typeName@" value="Value:one" />
      <input name="pivot" type="float" value="0.0" />
      <input name="texcoord" type="vector2" defaultgeomprop="UV0" />
      <output name="out" type="@typeName@" default="Value:zero" />
    </nodedef>
  </template>

  <nodedef name="ND_noise2d_color3" node="noise2d" nodegroup="procedural2d">
    <input name="amplitude" type="vector3" value="1.0, 1.0, 1.0" />
    <input name="pivot" type="float" value="0.0" />
    <input name="texcoord" type="vector2" defaultgeomprop="UV0" />
    <output name="out" type="color3" default="0.0, 0.0, 0.0" />
  </nodedef>
  <nodedef name="ND_noise2d_color4" node="noise2d" nodegroup="procedural2d">
    <input name="amplitude" type="vector4" value="1.0, 1.0, 1.0, 1.0" />
    <input name="pivot" type="float" value="0.0" />
    <input name="texcoord" type="vector2" defaultgeomprop="UV0" />
    <output name="out" type="color4" default="0.0, 0.0, 0.0, 0.0" />
  </nodedef>

  <template name="TP_ND_noise2d_FA" varName="typeName" options="color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_noise2d_@typeName@FA" node="noise2d" nodegroup="procedural2d">
      <input name="amplitude" type="float" value="1.0" />
      <input name="pivot" type="float" value="0.0" />
      <input name="texcoord" type="vector2" defaultgeomprop="UV0" />
      <output name="out" type="@typeName@" default="Value:zero" />
    </nodedef>
  </template>


  <!--
    Node: <noise3d>
    3D Perlin noise in 1, 2, 3 or 4 channels.
  -->
  <template name="TP_ND_noise3d" varName="typeName" options="float, vector2, vector3, vector4">
    <nodedef name="ND_noise3d_@typeName@" node="noise3d" nodegroup="procedural3d">
      <input name="amplitude" type="@typeName@" value="Value:one" />
      <input name="pivot" type="float" value="0.0" />
      <input name="position" type="vector3" defaultgeomprop="Pobject" />
      <output name="out" type="@typeName@" default="Value:zero" />
    </nodedef>
  </template>

  <nodedef name="ND_noise3d_color3" node="noise3d" nodegroup="procedural3d">
    <input name="amplitude" type="vector3" value="1.0, 1.0, 1.0" />
    <input name="pivot" type="float" value="0.0" />
    <input name="position" type="vector3" defaultgeomprop="Pobject" />
    <output name="out" type="color3" default="0.0, 0.0, 0.0" />
  </nodedef>
  <nodedef name="ND_noise3d_color4" node="noise3d" nodegroup="procedural3d">
    <input name="amplitude" type="vector4" value="1.0, 1.0, 1.0, 1.0" />
    <input name="pivot" type="float" value="0.0" />
    <input name="position" type="vector3" defaultgeomprop="Pobject" />
    <output name="out" type="color4" default="0.0, 0.0, 0.0, 0.0" />
  </nodedef>

  <template name="TP_ND_noise3d_FA" varName="typeName" options="color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_noise3d_@typeName@FA" node="noise3d" nodegroup="procedural3d">
      <input name="amplitude" type="float" value="1.0" />
      <input name="pivot" type="float" value="0.0" />
      <input name="position" type="vector3" defaultgeomprop="Pobject" />
      <output name="out" type="@typeName@" default="Value:zero" />
    </nodedef>
  </template>


  <!--
    Node: <fractal2d>
    2D Fractal noise in 1, 2, 3 or 4 channels.
  -->
  <nodedef name="ND_fractal2d_float" node="fractal2d" nodegroup="procedural2d">
    <input name="amplitude" type="float" value="1.0" />
    <input name="octaves" type="integer" value="3" />
    <input name="lacunarity" type="float" value="2.0" />
    <input name="diminish" type="float" value="0.5" />
    <input name="texcoord" type="vector2" defaultgeomprop="UV0" />
    <output name="out" type="float" default="0.0" />
  </nodedef>
  <nodedef name="ND_fractal2d_color3" node="fractal2d" nodegroup="procedural2d">
    <input name="amplitude" type="vector3" value="1.0, 1.0, 1.0" />
    <input name="octaves" type="integer" value="3" />
    <input name="lacunarity" type="float" value="2.0" />
    <input name="diminish" type="float" value="0.5" />
    <input name="texcoord" type="vector2" defaultgeomprop="UV0" />
    <output name="out" type="color3" default="0.0, 0.0, 0.0" />
  </nodedef>
  <nodedef name="ND_fractal2d_color4" node="fractal2d" nodegroup="procedural2d">
    <input name="amplitude" type="vector4" value="1.0, 1.0, 1.0, 1.0" />
    <input name="octaves" type="integer" value="3" />
    <input name="lacunarity" type="float" value="2.0" />
    <input name="diminish" type="float" value="0.5" />
    <input name="texcoord" type="vector2" defaultgeomprop="UV0" />
    <output name="out" type="color4" default="0.0, 0.0, 0.0, 0.0" />
  </nodedef>
  <nodedef name="ND_fractal2d_vector2" node="fractal2d" nodegroup="procedural2d">
    <input name="amplitude" type="vector2" value="1.0, 1.0" />
    <input name="octaves" type="integer" value="3" />
    <input name="lacunarity" type="float" value="2.0" />
    <input name="diminish" type="float" value="0.5" />
    <input name="texcoord" type="vector2" defaultgeomprop="UV0" />
    <output name="out" type="vector2" default="0.0, 0.0" />
  </nodedef>
  <nodedef name="ND_fractal2d_vector3" node="fractal2d" nodegroup="procedural2d">
    <input name="amplitude" type="vector3" value="1.0, 1.0, 1.0" />
    <input name="octaves" type="integer" value="3" />
    <input name="lacunarity" type="float" value="2.0" />
    <input name="diminish" type="float" value="0.5" />
    <input name="texcoord" type="vector2" defaultgeomprop="UV0" />
    <output name="out" type="vector3" default="0.0, 0.0, 0.0" />
  </nodedef>
  <nodedef name="ND_fractal2d_vector4" node="fractal2d" nodegroup="procedural2d">
    <input name="amplitude" type="vector4" value="1.0, 1.0, 1.0, 1.0" />
    <input name="octaves" type="integer" value="3" />
    <input name="lacunarity" type="float" value="2.0" />
    <input name="diminish" type="float" value="0.5" />
    <input name="texcoord" type="vector2" defaultgeomprop="UV0" />
    <output name="out" type="vector4" default="0.0, 0.0, 0.0, 0.0" />
  </nodedef>
  <nodedef name="ND_fractal2d_color3FA" node="fractal2d" nodegroup="procedural2d">
    <input name="amplitude" type="float" value="1.0" />
    <input name="octaves" type="integer" value="3" />
    <input name="lacunarity" type="float" value="2.0" />
    <input name="diminish" type="float" value="0.5" />
    <input name="texcoord" type="vector2" defaultgeomprop="UV0" />
    <output name="out" type="color3" default="0.0, 0.0, 0.0" />
  </nodedef>
  <nodedef name="ND_fractal2d_color4FA" node="fractal2d" nodegroup="procedural2d">
    <input name="amplitude" type="float" value="1.0" />
    <input name="octaves" type="integer" value="3" />
    <input name="lacunarity" type="float" value="2.0" />
    <input name="diminish" type="float" value="0.5" />
    <input name="texcoord" type="vector2" defaultgeomprop="UV0" />
    <output name="out" type="color4" default="0.0, 0.0, 0.0, 0.0" />
  </nodedef>
  <nodedef name="ND_fractal2d_vector2FA" node="fractal2d" nodegroup="procedural2d">
    <input name="amplitude" type="float" value="1.0" />
    <input name="octaves" type="integer" value="3" />
    <input name="lacunarity" type="float" value="2.0" />
    <input name="diminish" type="float" value="0.5" />
    <input name="texcoord" type="vector2" defaultgeomprop="UV0" />
    <output name="out" type="vector2" default="0.0, 0.0" />
  </nodedef>
  <nodedef name="ND_fractal2d_vector3FA" node="fractal2d" nodegroup="procedural2d">
    <input name="amplitude" type="float" value="1.0" />
    <input name="octaves" type="integer" value="3" />
    <input name="lacunarity" type="float" value="2.0" />
    <input name="diminish" type="float" value="0.5" />
    <input name="texcoord" type="vector2" defaultgeomprop="UV0" />
    <output name="out" type="vector3" default="0.0, 0.0, 0.0" />
  </nodedef>
  <nodedef name="ND_fractal2d_vector4FA" node="fractal2d" nodegroup="procedural2d">
    <input name="amplitude" type="float" value="1.0" />
    <input name="octaves" type="integer" value="3" />
    <input name="lacunarity" type="float" value="2.0" />
    <input name="diminish" type="float" value="0.5" />
    <input name="texcoord" type="vector2" defaultgeomprop="UV0" />
    <output name="out" type="vector4" default="0.0, 0.0, 0.0, 0.0" />
  </nodedef>

  <!--
    Node: <fractal3d>
    3D Fractal noise in 1, 2, 3 or 4 channels.
  -->
  <template name="TP_ND_fractal3d" varName="typeName" options="float, vector2, vector3, vector4">
    <nodedef name="ND_fractal3d_@typeName@" node="fractal3d" nodegroup="procedural3d">
      <input name="amplitude" type="@typeName@" value="Value:one" />
      <input name="octaves" type="integer" value="3" />
      <input name="lacunarity" type="float" value="2.0" />
      <input name="diminish" type="float" value="0.5" />
      <input name="position" type="vector3" defaultgeomprop="Pobject" />
      <output name="out" type="@typeName@" default="Value:zero" />
    </nodedef>
  </template>

  <nodedef name="ND_fractal3d_color3" node="fractal3d" nodegroup="procedural3d">
    <input name="amplitude" type="vector3" value="1.0, 1.0, 1.0" />
    <input name="octaves" type="integer" value="3" />
    <input name="lacunarity" type="float" value="2.0" />
    <input name="diminish" type="float" value="0.5" />
    <input name="position" type="vector3" defaultgeomprop="Pobject" />
    <output name="out" type="color3" default="0.0, 0.0, 0.0" />
  </nodedef>
  <nodedef name="ND_fractal3d_color4" node="fractal3d" nodegroup="procedural3d">
    <input name="amplitude" type="vector4" value="1.0, 1.0, 1.0, 1.0" />
    <input name="octaves" type="integer" value="3" />
    <input name="lacunarity" type="float" value="2.0" />
    <input name="diminish" type="float" value="0.5" />
    <input name="position" type="vector3" defaultgeomprop="Pobject" />
    <output name="out" type="color4" default="0.0, 0.0, 0.0, 0.0" />
  </nodedef>

  <template name="TP_ND_fractal3d_FA" varName="typeName" options="color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_fractal3d_@typeName@FA" node="fractal3d" nodegroup="procedural3d">
      <input name="amplitude" type="float" value="1.0" />
      <input name="octaves" type="integer" value="3" />
      <input name="lacunarity" type="float" value="2.0" />
      <input name="diminish" type="float" value="0.5" />
      <input name="position" type="vector3" defaultgeomprop="Pobject" />
      <output name="out" type="@typeName@" default="Value:zero" />
    </nodedef>
  </template>

  <!--
    Node: <cellnoise2d>
    2D cellular noise in 1 channel.
  -->
  <nodedef name="ND_cellnoise2d_float" node="cellnoise2d" nodegroup="procedural2d">
    <input name="texcoord" type="vector2" defaultgeomprop="UV0" />
    <output name="out" type="float" default="0.0" />
  </nodedef>

  <!--
    Node: <cellnoise3d>
    3D cellular noise in 1 channel.
  -->
  <nodedef name="ND_cellnoise3d_float" node="cellnoise3d" nodegroup="procedural3d">
    <input name="position" type="vector3" defaultgeomprop="Pobject" />
    <output name="out" type="float" default="0.0" />
  </nodedef>

  <!--
    Node: <worleynoise2d>
    2D Worley (voronoi) noise in 1, 2 or 3 channels.
  -->
  <nodedef name="ND_worleynoise2d_float" node="worleynoise2d" nodegroup="procedural2d">
    <input name="texcoord" type="vector2" defaultgeomprop="UV0" />
    <input name="jitter" type="float" value="1.0" />
    <input name="style" uiname="Cell Style" type="integer" value="0" enum="Distance,Solid" enumvalues="0,1" />
    <output name="out" type="float" default="0.0" />
  </nodedef>
  <nodedef name="ND_worleynoise2d_vector2" node="worleynoise2d" nodegroup="procedural2d">
    <input name="texcoord" type="vector2" defaultgeomprop="UV0" />
    <input name="jitter" type="float" value="1.0" />
    <input name="style" uiname="Cell Style" type="integer" value="0" enum="Distance,Solid" enumvalues="0,1" />
    <output name="out" type="vector2" default="0.0, 0.0" />
  </nodedef>
  <nodedef name="ND_worleynoise2d_vector3" node="worleynoise2d" nodegroup="procedural2d">
    <input name="texcoord" type="vector2" defaultgeomprop="UV0" />
    <input name="jitter" type="float" value="1.0" />
    <input name="style" uiname="Cell Style" type="integer" value="0" enum="Distance,Solid" enumvalues="0,1" />
    <output name="out" type="vector3" default="0.0, 0.0, 0.0" />
  </nodedef>

  <!--
    Node: <worleynoise3d>
    3D Worley (voronoi) noise in 1, 2 or 3 channels.
  -->
  <template name="TP_ND_worleynoise3d" varName="typeName" options="float, vector2, vector3">
    <nodedef name="ND_worleynoise3d_@typeName@" node="worleynoise3d" nodegroup="procedural3d">
      <input name="position" type="vector3" defaultgeomprop="Pobject" />
      <input name="jitter" type="float" value="1.0" />
      <input name="style" uiname="Cell Style" type="integer" value="0" enum="Distance,Solid" enumvalues="0,1" />
      <output name="out" type="@typeName@" default="Value:zero" />
    </nodedef>
  </template>

  <!--
    Node: <unifiednoise2d>
    Combines the available noises into an artist-friendly node, adding controls
    to adjust frequency, offset, jitter, etc... Where possible controls have
    been unified between noises; any noise-specific controls should live in a
    dedicated folder. These folders should be hidden by artist tools, unless their
    corresponding noise type is selected.
    
    The noise types are:
    
       0 - Perlin (noise2d/noise3d)
       1 - Cell (cellnoise2d/cellnoise3d)
       2 - Worley (worley2d/worley3d)
       3 - Fractal (fractal3d)
    
    The output is 1 channel, with controls to adjust the output range.
  -->
  <nodedef name="ND_unifiednoise2d_float" node="unifiednoise2d" nodegroup="procedural2d">
    <input name="texcoord" type="vector2" uifolder="Common" defaultgeomprop="UV0" doc="The input 2d space. Default is the first texture coordinates." />
    <input name="freq" type="vector2" uiname="Frequency" uifolder="Common" value="1, 1" doc="Adjusts the noise frequency, with higher values producing smaller noise shapes. Default is (1,1)." />
    <input name="offset" type="vector2" uiname="Offset" uifolder="Common" value="0, 0" doc="Shift the noise in 2d space. Default is (0,0)." />
    <input name="jitter" type="float" uiname="Jitter" uifolder="Common" uisoftmin="0.0" uisoftmax="1.0" value="1" doc="Adjust uniformity of Worley noise; for other noise types jitters the results." />
    <input name="outmin" type="float" uiname="Output Min" uifolder="Post Process" value="0" doc="The lowest values fit to the noise. Default is 0.0." />
    <input name="outmax" type="float" uiname="Output Max" uifolder="Post Process" value="1" doc="The highest values fit to the noise. Default is 1.0." />
    <input name="clampoutput" type="boolean" uiname="Clamp Output" uifolder="Post Process" value="true" doc="Clamp the output to the min and max output values." />
    <input name="octaves" type="integer" uiname="Octaves" uifolder="Fractal" value="3" doc="The number of octaves of Fractal noise to be generated. Default is 3." />
    <input name="lacunarity" type="float" uiname="Lacunarity" uifolder="Fractal" value="2" doc="The exponential scale between successive octaves of Fractal noise. Default is 2.0." />
    <input name="diminish" type="float" uiname="Diminish" uifolder="Fractal" uisoftmin="0.0" uisoftmax="1.0" value="0.5" doc="The rate at which noise amplitude is diminished for each octave of Fractal noise. Default is 0.5." />
    <input name="type" type="integer" uiname="Noise Type" uifolder="Common" uisoftmin="0" uisoftmax="3" value="0" enum="Perlin,Cell,Worley,Fractal" enumvalues="0,1,2,3" doc="Menu to select the type of noise: Perlin, Cell, Worley, or Fractal. Default is Perlin." />
    <input name="style" uiname="Worley Cell Style" type="integer" value="0" enum="Distance,Solid" enumvalues="0,1" doc="Sets the style of cell used when Noise Type is set to Worley." />
    <output name="out" type="float" />
  </nodedef>

  <!--
    Node: <unifiednoise3d>
    The 3d flavor of <unifiednoise2d>.
  -->
  <nodedef name="ND_unifiednoise3d_float" node="unifiednoise3d" nodegroup="procedural3d">
    <input name="position" type="vector3" uifolder="Common" defaultgeomprop="Pobject" doc="The input 3d space. Default is position in object-space." />
    <input name="freq" type="vector3" uiname="Frequency" uifolder="Common" value="1, 1, 1" doc="Adjusts the noise frequency, with higher values producing smaller noise shapes. Default is (1,1,1)." />
    <input name="offset" type="vector3" uiname="Offset" uifolder="Common" value="0, 0, 0" doc="Shift the noise in 3d space. Default is (0,0,0)." />
    <input name="jitter" type="float" uiname="Jitter" uifolder="Common" uisoftmin="0.0" uisoftmax="1.0" value="1" doc="Adjust uniformity of Worley noise; for other noise types jitters the results." />
    <input name="outmin" type="float" uiname="Output Min" uifolder="Post Process" value="0" doc="The lowest values fit to the noise. Default is 0.0." />
    <input name="outmax" type="float" uiname="Output Max" uifolder="Post Process" value="1" doc="The highest values fit to the noise. Default is 1.0." />
    <input name="clampoutput" type="boolean" uiname="Clamp Output" uifolder="Post Process" value="true" doc="Clamp the output to the min and max output values." />
    <input name="octaves" type="integer" uiname="Octaves" uifolder="Fractal" value="3" doc="The number of octaves of Fractal noise to be generated. Default is 3." />
    <input name="lacunarity" type="float" uiname="Lacunarity" uifolder="Fractal" value="2" doc="The exponential scale between successive octaves of Fractal noise. Default is 2.0." />
    <input name="diminish" type="float" uiname="Diminish" uifolder="Fractal" uisoftmin="0.0" uisoftmax="1.0" value="0.5" doc="The rate at which noise amplitude is diminished for each octave of Fractal noise. Default is 0.5." />
    <input name="type" type="integer" uiname="Noise Type" uifolder="Common" uisoftmin="0" uisoftmax="3" value="0" enum="Perlin,Cell,Worley,Fractal" enumvalues="0,1,2,3" doc="Menu to select the type of noise: Perlin, Cell, Worley, or Fractal. Default is Perlin." />
    <input name="style" uiname="Worley Cell Style" type="integer" value="0" enum="Distance,Solid" enumvalues="0,1" doc="Sets the style of cell used when Noise Type is set to Worley." />
    <output name="out" type="float" />
  </nodedef>

  <!--
    Node: <randomfloat>
    Produces a randomized float, based on an 'input' signal and 'seed' value.
  -->
  <template name="TP_ND_randomfloat" varName="typeName" options="float, integer">
    <nodedef name="ND_randomfloat_@typeName@" node="randomfloat" nodegroup="procedural">
      <input name="in" type="@typeName@" uiname="Input" value="Value:zero" doc="Initial randomization seed." />
      <input name="min" type="float" uiname="Minimum" value="0.0" doc="The minimum output value." />
      <input name="max" type="float" uiname="Maximum" value="1.0" doc="The maximum output value." />
      <input name="seed" type="integer" uiname="Seed" value="0" doc="Additional seed." />
      <output name="out" type="float" />
    </nodedef>
  </template>

  <!--
    Node: <randomcolor>
    Produces a randomized RGB color, based on an 'input' signal and 'seed' value.
  -->
  <template name="TP_ND_randomcolor" varName="typeName" options="float, integer">
    <nodedef name="ND_randomcolor_@typeName@" node="randomcolor" nodegroup="procedural3d">
      <input name="in" type="@typeName@" uiname="Input" uisoftmin="Value:zero" uisoftmax="10" value="Value:zero" />
      <input name="huelow" type="float" uiname="Hue Low" uisoftmin="0.0" uisoftmax="1.0" value="0" />
      <input name="huehigh" type="float" uiname="Hue High" uisoftmin="0.0" uisoftmax="1.0" value="1" />
      <input name="saturationlow" type="float" uiname="Saturation Low" uisoftmin="0.0" uisoftmax="1.0" value="0.825" />
      <input name="saturationhigh" type="float" uiname="Saturation High" uisoftmin="0.0" uisoftmax="1.0" value="1" />
      <input name="brightnesslow" type="float" uiname="Brightness Low" uisoftmin="0.0" uisoftmax="1.0" value="1" />
      <input name="brightnesshigh" type="float" uiname="Brightness High" uisoftmin="0.0" uisoftmax="1.0" value="1" />
      <input name="seed" type="integer" uiname="Seed" value="0" />
      <output name="out" type="color3" />
    </nodedef>
  </template>

  <!--
    Node: <checkerboard>
    A 2D checkerboard pattern.
  -->
  <nodedef name="ND_checkerboard_color3" node="checkerboard" nodegroup="procedural2d">
    <input name="color1" type="color3" uiname="Color 1" value="1.0, 1.0, 1.0" doc="The first color used in the checkerboard pattern." />
    <input name="color2" type="color3" uiname="Color 2" value="0.0, 0.0, 0.0" doc="The second color used in the checkerboard pattern." />
    <input name="uvtiling" type="vector2" uiname="UV Tiling" value="8, 8" doc="The tiling of the checkerboard pattern along each axis, with higher values producing smaller squares. Default is (8, 8)." />
    <input name="uvoffset" type="vector2" uiname="UV Offset" value="0, 0" doc="The offset of the checkerboard pattern along each axis. Default is (0, 0)." />
    <input name="texcoord" type="vector2" uiname="Texture Coordinates" defaultgeomprop="UV0" doc="The input 2d space. Default is the first texture coordinates." />
    <output name="out" type="color3" />
  </nodedef>

  <!--
    Node: <line>
    Returns 1 if texcoord is at less than radius distance from a line segment defined by point1 and point2; otherwise returns 0.
    Segment ends will be rounded.
    Uses formulas from Inigo Quilez SDF samples (iquilezles.org)
  -->
  <nodedef name="ND_line_float" node="line" nodegroup="procedural2d">
    <input name="texcoord" type="vector2" defaultgeomprop="UV0" />
    <input name="center" type="vector2" value="0, 0" />
    <input name="radius" type="float" value="0.1" />
    <input name="point1" type="vector2" value="0.25, 0.25" />
    <input name="point2" type="vector2" value="0.75, 0.75" />
    <output name="out" type="float" />
  </nodedef>

  <!--
    Node: <circle>
    Returns 1 if texcoord is inside a circle defined by center and radius; otherwise returns 0.
  -->
  <nodedef name="ND_circle_float" node="circle" nodegroup="procedural2d">
    <input name="texcoord" type="vector2" defaultgeomprop="UV0" />
    <input name="center" type="vector2" value="0, 0" />
    <input name="radius" type="float" value="0.5" />
    <output name="out" type="float" />
  </nodedef>

  <!--
    Node: <cloverleaf>
    Returns 1 if texcoord is inside a cloverleaf shape inscribed by a circle defined by center and radius; otherwise returns 0.
  -->
  <nodedef name="ND_cloverleaf_float" node="cloverleaf" nodegroup="procedural2d">
    <input name="texcoord" type="vector2" defaultgeomprop="UV0" />
    <input name="center" type="vector2" value="0, 0" />
    <input name="radius" type="float" value="0.5" />
    <output name="out" type="float" />
  </nodedef>

  <!--
    Node: <hexagon>
    Returns 1 if texcoord is inside a hexagon shape inscribed by a circle defined by center and radius; otherwise returns 0.
    Uses formulas from Inigo Quilez SDF samples (iquilezles.org)
  -->
  <nodedef name="ND_hexagon_float" node="hexagon" nodegroup="procedural2d">
    <input name="texcoord" type="vector2" defaultgeomprop="UV0" />
    <input name="center" type="vector2" value="0, 0" />
    <input name="radius" type="float" value="0.5" />
    <output name="out" type="float" />
  </nodedef>

  <!--
    Node: <grid>
    Creates a grid pattern with the given tiling, offset, and line thickness.
    Pattern can be regular or staggered.
  -->
  <nodedef name="ND_grid_color3" node="grid" nodegroup="procedural2d">
    <input name="texcoord" type="vector2" defaultgeomprop="UV0" />
    <input name="uvtiling" type="vector2" value="1.0, 1.0" />
    <input name="uvoffset" type="vector2" value="0.0, 0.0" />
    <input name="thickness" type="float" value="0.05" />
    <input name="staggered" type="boolean" value="false" />
    <output name="out" type="color3" />
  </nodedef>

  <!--
    Node: <crosshatch>
    Creates a crosshatch pattern with the given tiling, offset, and line thickness.
    Pattern can be regular or staggered.
  -->
  <nodedef name="ND_crosshatch_color3" node="crosshatch" nodegroup="procedural2d">
    <input name="texcoord" type="vector2" defaultgeomprop="UV0" />
    <input name="uvtiling" type="vector2" value="1.0, 1.0" />
    <input name="uvoffset" type="vector2" value="0.0, 0.0" />
    <input name="thickness" type="float" value="0.05" />
    <input name="staggered" type="boolean" value="false" />
    <output name="out" type="color3" />
  </nodedef>

  <!--
    Node: <tiledcircles>
    Creates a black and white pattern of circles with a defined tiling and size (diameter).
    Pattern can be regular or staggered.
  -->
  <nodedef name="ND_tiledcircles_color3" node="tiledcircles" nodegroup="procedural2d">
    <input name="texcoord" type="vector2" defaultgeomprop="UV0" />
    <input name="uvtiling" type="vector2" value="1.0, 1.0" />
    <input name="uvoffset" type="vector2" value="0.0, 0.0" />
    <input name="size" type="float" value="0.5" />
    <input name="staggered" type="boolean" value="false" />
    <output name="out" type="color3" />
  </nodedef>

  <!--
    Node: <tiledcloverleafs>
    Creates a black and white pattern of cloverleafs with a defined tiling and size (diameter of the circles circumscribing the shape).
    Pattern can be regular or staggered.
  -->
  <nodedef name="ND_tiledcloverleafs_color3" node="tiledcloverleafs" nodegroup="procedural2d">
    <input name="texcoord" type="vector2" defaultgeomprop="UV0" />
    <input name="uvtiling" type="vector2" value="1.0, 1.0" />
    <input name="uvoffset" type="vector2" value="0.0, 0.0" />
    <input name="size" type="float" value="0.5" />
    <input name="staggered" type="boolean" value="false" />
    <output name="out" type="color3" />
  </nodedef>

  <!--
    Node: <tiledhexagons>
    Creates a black and white pattern of hexagons with a defined tiling and size (diameter of the circles circumscribing the shape).
    Pattern can be regular or staggered.
  -->
  <nodedef name="ND_tiledhexagons_color3" node="tiledhexagons" nodegroup="procedural2d">
    <input name="texcoord" type="vector2" defaultgeomprop="UV0" />
    <input name="uvtiling" type="vector2" value="1.0, 1.0" />
    <input name="uvoffset" type="vector2" value="0.0, 0.0" />
    <input name="size" type="float" value="0.5" />
    <input name="staggered" type="boolean" value="false" />
    <output name="out" type="color3" />
  </nodedef>

  <!-- ======================================================================== -->
  <!-- Geometric nodes                                                          -->
  <!-- ======================================================================== -->

  <!--
    Node: <position>
    The geometric position associated with the currently processed data,
    as defined in a specific coordinate space.
  -->
  <nodedef name="ND_position_vector3" node="position" nodegroup="geometric">
    <input name="space" type="string" value="object" enum="model,object,world" uniform="true" />
    <output name="out" type="vector3" default="0.0, 0.0, 0.0" />
  </nodedef>

  <!--
    Node: <normal>
    The geometric normal associated with the currently processed data,
    as defined in a specific coordinate space.
  -->
  <nodedef name="ND_normal_vector3" node="normal" nodegroup="geometric">
    <input name="space" type="string" value="object" enum="model,object,world" uniform="true" />
    <output name="out" type="vector3" default="0.0, 1.0, 0.0" />
  </nodedef>

  <!--
    Node: <tangent>
    The geometric tangent vector associated with the currently processed data,
    as defined in a specific coordinate space.
  -->
  <nodedef name="ND_tangent_vector3" node="tangent" nodegroup="geometric">
    <input name="space" type="string" value="object" enum="model,object,world" uniform="true" />
    <input name="index" type="integer" value="0" uniform="true" />
    <output name="out" type="vector3" default="1.0, 0.0, 0.0" />
  </nodedef>

  <!--
    Node: <bitangent>
    The geometric bitangent vector associated with the currently processed data,
    as defined in a specific coordinate space.
  -->
  <nodedef name="ND_bitangent_vector3" node="bitangent" nodegroup="geometric">
    <input name="space" type="string" value="object" enum="model,object,world" uniform="true" />
    <input name="index" type="integer" value="0" uniform="true" />
    <output name="out" type="vector3" default="0.0, 0.0, 1.0" />
  </nodedef>

  <!--
    Node: <texcoord>
    The full 2D or 3D texture coordinates associated with the currently processed data.
  -->
  <template name="TP_ND_texcoord" varName="typeName" options="vector2, vector3">
    <nodedef name="ND_texcoord_@typeName@" node="texcoord" nodegroup="geometric">
      <input name="index" type="integer" value="0" uniform="true" />
      <output name="out" type="@typeName@" default="Value:zero" />
    </nodedef>
  </template>

  <!--
    Node: <geomcolor>
    The color associated with the current geometry at the current position, generally
    bound via per-vertex color values.
  -->
  <template name="TP_ND_geomcolor" varName="typeName" options="float, color3, color4">
    <nodedef name="ND_geomcolor_@typeName@" node="geomcolor" nodegroup="geometric">
      <input name="index" type="integer" value="0" uniform="true" />
      <output name="out" type="@typeName@" default="Value:zero" />
    </nodedef>
  </template>

  <!--
    Node: <geompropvalue>
    The value of the specified geometric property for the current geometry.
  -->
  <template name="TP_ND_geompropvalue" varName="typeName" options="integer, boolean, float, color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_geompropvalue_@typeName@" node="geompropvalue" nodegroup="geometric">
      <input name="geomprop" type="string" value="" uniform="true" />
      <input name="default" type="@typeName@" value="Value:zero" />
      <output name="out" type="@typeName@" default="Value:zero" />
    </nodedef>
  </template>

  <!--
    Node: <geompropvalueuniform>
    The uniform, non-varying value of the specified geometric property for the current geometry.
  -->
  <template name="TP_ND_geompropvalueuniform" varName="typeName" options="string, filename">
    <nodedef name="ND_geompropvalueuniform_@typeName@" node="geompropvalueuniform" nodegroup="geometric">
      <input name="geomprop" type="string" value="" uniform="true" />
      <input name="default" type="@typeName@" value="Value:zero" uniform="true" />
      <output name="out" type="@typeName@" default="Value:zero" uniform="true" />
    </nodedef>
  </template>


  <!--
    Node: <bump>
    Offset the surface normal by a scalar value.
  -->
  <nodedef name="ND_bump_vector3" node="bump" nodegroup="geometric">
    <input name="height" type="float" uiname="Height" uisoftmin="0.0" uisoftmax="1.0" value="0" doc="Amount to offset the surface normal." />
    <input name="scale" type="float" uiname="Scale" uisoftmin="0.0" uisoftmax="1.0" value="1" doc="Scalar to adjust the height amount." />
    <input name="normal" type="vector3" uiname="Normal" defaultgeomprop="Nworld" doc="Surface normal; defaults to the current world-space normal." />
    <input name="tangent" type="vector3" uiname="Tangent" defaultgeomprop="Tworld" doc="Surface tangent vector, defaults to the current world-space tangent vector." />
    <input name="bitangent" type="vector3" uiname="Bitangent" defaultgeomprop="Bworld" doc="Surface bitangent vector, defaults to the current world-space bitangent vector." />
    <output name="out" type="vector3" doc="Offset surface normal; connect this to a shader's 'normal' input." />
  </nodedef>

  <!-- ======================================================================== -->
  <!-- Application nodes                                                        -->
  <!-- ======================================================================== -->

  <!--
    Node: <frame>
    The current frame number as defined by the host environment.
  -->
  <nodedef name="ND_frame_float" node="frame" nodegroup="application">
    <output name="out" type="float" default="1.0" />
  </nodedef>

  <!--
    Node: <time>
    The current time in seconds as defined by the host environment.
  -->
  <nodedef name="ND_time_float" node="time" nodegroup="application">
    <input name="fps" type="float" value="24.0" /> <!-- An unused input, to be removed in a future specification version -->
    <output name="out" type="float" default="0.0" />
  </nodedef>

  <!-- ======================================================================== -->
  <!-- Math nodes                                                               -->
  <!-- ======================================================================== -->

  <!--
    Node: <add>
    Add "in2" value/stream to the incoming float/integer/color/vector/matrix.
  -->
  <template name="TP_ND_add" varName="typeName" options="float, integer, color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_add_@typeName@" node="add" nodegroup="math">
      <input name="in1" type="@typeName@" value="Value:zero" />
      <input name="in2" type="@typeName@" value="Value:zero" />
      <output name="out" type="@typeName@" defaultinput="in1" />
    </nodedef>
  </template>
  <template name="TP_ND_add_matrix" varName="typeName" options="matrix33, matrix44">
    <nodedef name="ND_add_@typeName@" node="add" nodegroup="math">
      <input name="in1" type="@typeName@" value="Value:one" />
      <input name="in2" type="@typeName@" value="Value:zero" />
      <output name="out" type="@typeName@" defaultinput="in1" />
    </nodedef>
  </template>
  <template name="TP_ND_addFA" varName="typeName" options="color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_add_@typeName@FA" node="add" nodegroup="math">
      <input name="in1" type="@typeName@" value="Value:zero" />
      <input name="in2" type="float" value="Value:zero" />
      <output name="out" type="@typeName@" defaultinput="in1" />
    </nodedef>
  </template>
  <template name="TP_ND_add_matrixFA" varName="typeName" options="matrix33, matrix44">
    <nodedef name="ND_add_@typeName@FA" node="add" nodegroup="math">
      <input name="in1" type="@typeName@" value="Value:one" />
      <input name="in2" type="float" value="Value:zero" />
      <output name="out" type="@typeName@" defaultinput="in1" />
    </nodedef>
  </template>

  <!--
    Node: <subtract>
    Subtract "in2" value/stream from the incoming float/integer/color/vector/matrix.
  -->
  <template name="TP_ND_subtract" varName="typeName" options="float, integer, color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_subtract_@typeName@" node="subtract" nodegroup="math">
      <input name="in1" type="@typeName@" value="Value:zero" />
      <input name="in2" type="@typeName@" value="Value:zero" />
      <output name="out" type="@typeName@" defaultinput="in1" />
    </nodedef>
  </template>
  <template name="TP_ND_subtract_matrix" varName="typeName" options="matrix33, matrix44">
    <nodedef name="ND_subtract_@typeName@" node="subtract" nodegroup="math">
      <input name="in1" type="@typeName@" value="Value:one" />
      <input name="in2" type="@typeName@" value="Value:zero" />
      <output name="out" type="@typeName@" defaultinput="in1" />
    </nodedef>
  </template>
  <template name="TP_ND_subtractFA" varName="typeName" options="color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_subtract_@typeName@FA" node="subtract" nodegroup="math">
      <input name="in1" type="@typeName@" value="Value:zero" />
      <input name="in2" type="float" value="Value:zero" />
      <output name="out" type="@typeName@" defaultinput="in1" />
    </nodedef>
  </template>
  <template name="TP_ND_subtract_matrixFA" varName="typeName" options="matrix33, matrix44">
    <nodedef name="ND_subtract_@typeName@FA" node="subtract" nodegroup="math">
      <input name="in1" type="@typeName@" value="Value:one" />
      <input name="in2" type="float" value="Value:zero" />
      <output name="out" type="@typeName@" defaultinput="in1" />
    </nodedef>
  </template>

  <!--
    Node: <multiply>
    Multiply the incoming float/color/vector by the "in2" value/stream, or multiply
    two matrices.
  -->
  <template name="TP_ND_multiply" varName="typeName" options="float, color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_multiply_@typeName@" node="multiply" nodegroup="math">
      <input name="in1" type="@typeName@" value="Value:zero" />
      <input name="in2" type="@typeName@" value="Value:one" />
      <output name="out" type="@typeName@" defaultinput="in1" />
    </nodedef>
  </template>
  <template name="TP_ND_multiply_matrix" varName="typeName" options="matrix33, matrix44">
    <nodedef name="ND_multiply_@typeName@" node="multiply" nodegroup="math">
      <input name="in1" type="@typeName@" value="Value:one" />
      <input name="in2" type="@typeName@" value="Value:one" />
      <output name="out" type="@typeName@" defaultinput="in1" />
    </nodedef>
  </template>
  <template name="TP_ND_multiplyFA" varName="typeName" options="color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_multiply_@typeName@FA" node="multiply" nodegroup="math">
      <input name="in1" type="@typeName@" value="Value:zero" />
      <input name="in2" type="float" value="Value:one" />
      <output name="out" type="@typeName@" defaultinput="in1" />
    </nodedef>
  </template>

  <!--
    Node: <divide>
    Divide an incoming float/color/vector by the "in2" value/stream; dividing a channel
    value by 0 results in floating-point "NaN".  Or, multiply one matrix by the
    inverse of a second matrix.
  -->
  <template name="TP_ND_divide" varName="typeName" options="float, color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_divide_@typeName@" node="divide" nodegroup="math">
      <input name="in1" type="@typeName@" value="Value:zero" />
      <input name="in2" type="@typeName@" value="Value:one" />
      <output name="out" type="@typeName@" defaultinput="in1" />
    </nodedef>
  </template>
  <template name="TP_ND_divide_matrix" varName="typeName" options="matrix33, matrix44">
    <nodedef name="ND_divide_@typeName@" node="divide" nodegroup="math">
      <input name="in1" type="@typeName@" value="Value:one" />
      <input name="in2" type="@typeName@" value="Value:one" />
      <output name="out" type="@typeName@" defaultinput="in1" />
    </nodedef>
  </template>
  <template name="TP_ND_divideFA" varName="typeName" options="color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_divide_@typeName@FA" node="divide" nodegroup="math">
      <input name="in1" type="@typeName@" value="Value:zero" />
      <input name="in2" type="float" value="Value:one" />
      <output name="out" type="@typeName@" defaultinput="in1" />
    </nodedef>
  </template>

  <!--
    Node: <modulo>
    The remaining fraction after dividing one float/color/vector by another and
    subtracting the integer portion. The modula "in2" value cannot be 0.
  -->
  <template name="TP_ND_modulo" varName="typeName" options="float, color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_modulo_@typeName@" node="modulo" nodegroup="math">
      <input name="in1" type="@typeName@" value="Value:zero" />
      <input name="in2" type="@typeName@" value="Value:one" />
      <output name="out" type="@typeName@" defaultinput="in1" />
    </nodedef>
  </template>
  <template name="TP_ND_moduloFA" varName="typeName" options="color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_modulo_@typeName@FA" node="modulo" nodegroup="math">
      <input name="in1" type="@typeName@" value="Value:zero" />
      <input name="in2" type="float" value="1.0" />
      <output name="out" type="@typeName@" defaultinput="in1" />
    </nodedef>
  </template>

  <!--
    Node: <fract>
    The fraction of a float or vector.
  -->
  <template name="TP_ND_fract" varName="typeName" options="float, color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_fract_@typeName@" node="fract" nodegroup="math">
      <input name="in" type="@typeName@" value="Value:zero" />
      <output name="out" type="@typeName@" defaultinput="in" />
    </nodedef>
  </template>

  <!--
    Node: <invert>
    Subtract the incoming float/color/vector from "amount" in all channels,
    outputting: amount - in.
  -->
  <template name="TP_ND_invert" varName="typeName" options="float, color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_invert_@typeName@" node="invert" nodegroup="math">
      <input name="in" type="@typeName@" value="Value:zero" />
      <input name="amount" type="@typeName@" value="Value:one" />
      <output name="out" type="@typeName@" defaultinput="in" />
    </nodedef>
  </template>
  <template name="TP_ND_invertFA" varName="typeName" options="color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_invert_@typeName@FA" node="invert" nodegroup="math">
      <input name="in" type="@typeName@" value="Value:zero" />
      <input name="amount" type="float" value="1.0" />
      <output name="out" type="@typeName@" defaultinput="in" />
    </nodedef>
  </template>

  <!--
    Node: <absval>
    The per-channel absolute value of the incoming float/color/vector.
  -->
  <template name="TP_ND_absval" varName="typeName" options="float, color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_absval_@typeName@" node="absval" nodegroup="math">
      <input name="in" type="@typeName@" value="Value:zero" />
      <output name="out" type="@typeName@" defaultinput="in" />
    </nodedef>
  </template>

  <!--
    Node: <floor>
    Find the nearest integer less than or equal to the parameter.
  -->
  <template name="TP_ND_floor" varName="typeName" options="float, color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_floor_@typeName@" node="floor" nodegroup="math">
      <input name="in" type="@typeName@" value="Value:zero" />
      <output name="out" type="@typeName@" defaultinput="in" />
    </nodedef>
  </template>
  <nodedef name="ND_floor_integer" node="floor" nodegroup="math">
    <input name="in" type="float" value="0.0" />
    <output name="out" type="integer" defaultinput="in" />
  </nodedef>

  <!--
    Node: <ceil>
    Find the nearest integer greater than or equal to the parameter.
  -->
  <template name="TP_ND_ceil" varName="typeName" options="float, color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_ceil_@typeName@" node="ceil" nodegroup="math">
      <input name="in" type="@typeName@" value="Value:zero" />
      <output name="out" type="@typeName@" defaultinput="in" />
    </nodedef>
  </template>
  <nodedef name="ND_ceil_integer" node="ceil" nodegroup="math">
    <input name="in" type="float" value="0.0" />
    <output name="out" type="integer" defaultinput="in" />
  </nodedef>

  <!--
    Node: <round>
    Round incoming float/color/vector values.
  -->
  <template name="TP_ND_round" varName="typeName" options="float, color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_round_@typeName@" node="round" nodegroup="math">
      <input name="in" type="@typeName@" value="Value:zero" />
      <output name="out" type="@typeName@" defaultinput="in" />
    </nodedef>
  </template>
  <nodedef name="ND_round_integer" node="round" nodegroup="math">
    <input name="in" type="float" value="0.0" />
    <output name="out" type="integer" defaultinput="in" />
  </nodedef>

  <!--
    Node: <power>
    Raise incoming float/color/vector values to the "in2" power.
  -->
  <template name="TP_ND_power" varName="typeName" options="float, color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_power_@typeName@" node="power" nodegroup="math">
      <input name="in1" type="@typeName@" value="Value:zero" />
      <input name="in2" type="@typeName@" value="Value:one" />
      <output name="out" type="@typeName@" defaultinput="in1" />
    </nodedef>
  </template>
  <template name="TP_ND_powerFA" varName="typeName" options="color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_power_@typeName@FA" node="power" nodegroup="math">
      <input name="in1" type="@typeName@" value="Value:zero" />
      <input name="in2" type="float" value="1.0" />
      <output name="out" type="@typeName@" defaultinput="in1" />
    </nodedef>
  </template>

  <!--
    Node: <safepower>
    Raise incoming float/color/vector values to the "in2" power.
    Negative "in1" values will result in negative output values. ie. out = sign(in1)*pow(abs(in1),in2)
  -->
  <template name="TP_ND_safepower" varName="typeName" options="float, color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_safepower_@typeName@" node="safepower" nodegroup="math">
      <input name="in1" type="@typeName@" value="Value:zero" />
      <input name="in2" type="@typeName@" value="Value:one" />
      <output name="out" type="@typeName@" defaultinput="in1" />
    </nodedef>
  </template>
  <template name="TP_ND_safepowerFA" varName="typeName" options="color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_safepower_@typeName@FA" node="safepower" nodegroup="math">
      <input name="in1" type="@typeName@" value="Value:zero" />
      <input name="in2" type="float" value="1.0" />
      <output name="out" type="@typeName@" defaultinput="in1" />
    </nodedef>
  </template>

  <!--
    Nodes: <sin>, <cos>, <tan>, <asin>, <acos>, <atan2>
    Standard trigonometric functions; angles are given in radians.
  -->
  <template name="TP_ND_sin" varName="typeName" options="float, vector2, vector3, vector4">
    <nodedef name="ND_sin_@typeName@" node="sin" nodegroup="math">
      <input name="in" type="@typeName@" value="Value:zero" />
      <output name="out" type="@typeName@" defaultinput="in" />
    </nodedef>
  </template>

  <template name="TP_ND_cos" varName="typeName" options="float, vector2, vector3, vector4">
    <nodedef name="ND_cos_@typeName@" node="cos" nodegroup="math">
      <input name="in" type="@typeName@" value="Value:zero" />
      <output name="out" type="@typeName@" defaultinput="in" />
    </nodedef>
  </template>

  <template name="TP_ND_tan" varName="typeName" options="float, vector2, vector3, vector4">
    <nodedef name="ND_tan_@typeName@" node="tan" nodegroup="math">
      <input name="in" type="@typeName@" value="Value:zero" />
      <output name="out" type="@typeName@" defaultinput="in" />
    </nodedef>
  </template>

  <template name="TP_ND_asin" varName="typeName" options="float, vector2, vector3, vector4">
    <nodedef name="ND_asin_@typeName@" node="asin" nodegroup="math">
      <input name="in" type="@typeName@" value="Value:zero" />
      <output name="out" type="@typeName@" defaultinput="in" />
    </nodedef>
  </template>

  <template name="TP_ND_acos" varName="typeName" options="float, vector2, vector3, vector4">
    <nodedef name="ND_acos_@typeName@" node="acos" nodegroup="math">
      <input name="in" type="@typeName@" value="Value:zero" />
      <output name="out" type="@typeName@" defaultinput="in" />
    </nodedef>
  </template>

  <template name="TP_ND_atan2" varName="typeName" options="float, vector2, vector3, vector4">
    <nodedef name="ND_atan2_@typeName@" node="atan2" nodegroup="math">
      <input name="iny" type="@typeName@" value="Value:zero" />
      <input name="inx" type="@typeName@" value="Value:one" />
      <output name="out" type="@typeName@" defaultinput="iny" />
    </nodedef>
  </template>

  <!--
    Nodes: <sqrt>, <ln>, <exp>
    Standard math functions.
  -->
  <template name="TP_ND_sqrt" varName="typeName" options="float, vector2, vector3, vector4">
    <nodedef name="ND_sqrt_@typeName@" node="sqrt" nodegroup="math">
      <input name="in" type="@typeName@" value="Value:zero" />
      <output name="out" type="@typeName@" defaultinput="in" />
    </nodedef>
  </template>

  <template name="TP_ND_ln" varName="typeName" options="float, vector2, vector3, vector4">
    <nodedef name="ND_ln_@typeName@" node="ln" nodegroup="math">
      <input name="in" type="@typeName@" value="Value:one" />
      <output name="out" type="@typeName@" defaultinput="in" />
    </nodedef>
  </template>

  <template name="TP_ND_exp" varName="typeName" options="float, vector2, vector3, vector4">
    <nodedef name="ND_exp_@typeName@" node="exp" nodegroup="math">
      <input name="in" type="@typeName@" value="Value:zero" />
      <output name="out" type="@typeName@" defaultinput="in" />
    </nodedef>
  </template>

  <!--
    Node: <sign>
    Sign of eachinput channel: -1, 0 or +1
  -->
  <template name="TP_ND_sign" varName="typeName" options="float, color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_sign_@typeName@" node="sign" nodegroup="math">
      <input name="in" type="@typeName@" value="Value:zero" />
      <output name="out" type="@typeName@" defaultinput="in" />
    </nodedef>
  </template>

  <!--
    Node: <clamp>
    Clamp incoming value to a specified range of values.
  -->
  <template name="TP_ND_clamp" varName="typeName" options="float, color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_clamp_@typeName@" node="clamp" nodegroup="math">
      <input name="in" type="@typeName@" value="Value:zero" />
      <input name="low" type="@typeName@" value="Value:zero" />
      <input name="high" type="@typeName@" value="Value:one" />
      <output name="out" type="@typeName@" defaultinput="in" />
    </nodedef>
  </template>

  <template name="TP_ND_clampFA" varName="typeName" options="color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_clamp_@typeName@FA" node="clamp" nodegroup="math">
      <input name="in" type="@typeName@" value="Value:zero" />
      <input name="low" type="float" value="0.0" />
      <input name="high" type="float" value="1.0" />
      <output name="out" type="@typeName@" defaultinput="in" />
    </nodedef>
  </template>

  <!--
    Node: <min>
    Select the minimum among incoming values.
  -->
  <template name="TP_ND_min" varName="typeName" options="float, color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_min_@typeName@" node="min" nodegroup="math">
      <input name="in1" type="@typeName@" value="Value:zero" />
      <input name="in2" type="@typeName@" value="Value:zero" />
      <output name="out" type="@typeName@" defaultinput="in1" />
    </nodedef>
  </template>
  <template name="TP_ND_minFA" varName="typeName" options="color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_min_@typeName@FA" node="min" nodegroup="math">
      <input name="in1" type="@typeName@" value="Value:zero" />
      <input name="in2" type="float" value="0.0" />
      <output name="out" type="@typeName@" defaultinput="in1" />
    </nodedef>
  </template>

  <!--
    Node: <max>
    Select the maximum among incoming values.
  -->
  <template name="TP_ND_max" varName="typeName" options="float, color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_max_@typeName@" node="max" nodegroup="math">
      <input name="in1" type="@typeName@" value="Value:zero" />
      <input name="in2" type="@typeName@" value="Value:zero" />
      <output name="out" type="@typeName@" defaultinput="in1" />
    </nodedef>
  </template>
  <template name="TP_ND_maxFA" varName="typeName" options="color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_max_@typeName@FA" node="max" nodegroup="math">
      <input name="in1" type="@typeName@" value="Value:zero" />
      <input name="in2" type="float" value="0.0" />
      <output name="out" type="@typeName@" defaultinput="in1" />
    </nodedef>
  </template>

  <!--
    Node: <normalize>
    Outputs the normalized vector from the incoming vector stream.
  -->
  <template name="TP_ND_normalize" varName="typeName" options="vector2, vector3, vector4">
    <nodedef name="ND_normalize_@typeName@" node="normalize" nodegroup="math">
      <input name="in" type="@typeName@" value="Value:zero" />
      <output name="out" type="@typeName@" defaultinput="in" />
    </nodedef>
  </template>

  <!--
    Node: <magnitude>
    Outputs the float magnitude (vector length) of the incoming vector stream.
  -->
  <template name="TP_ND_magnitude" varName="typeName" options="vector2, vector3, vector4">
    <nodedef name="ND_magnitude_@typeName@" node="magnitude" nodegroup="math">
      <input name="in" type="@typeName@" value="Value:zero" />
      <output name="out" type="float" default="0.0" />
    </nodedef>
  </template>

  <!--
    Node: <distance>
    Measures the distance between two points in 2D, 3D, or 4D.
  -->
  <template name="TP_ND_distance" varName="typeName" options="vector2, vector3, vector4">
    <nodedef name="ND_distance_@typeName@" node="distance" nodegroup="math">
      <input name="in1" type="@typeName@" value="Value:zero" uiname="in1" />
      <input name="in2" type="@typeName@" value="Value:zero" uiname="in2" />
      <output name="out" type="float" />
    </nodedef>
  </template>

  <!--
    Node: <dotproduct>
    Perform a dot product of two 2-4 channel vectors
  -->
  <template name="TP_ND_dotproduct" varName="typeName" options="vector2, vector3, vector4">
    <nodedef name="ND_dotproduct_@typeName@" node="dotproduct" nodegroup="math">
      <input name="in1" type="@typeName@" value="Value:zero" />
      <input name="in2" type="@typeName@" value="Value:zero" />
      <output name="out" type="float" default="0.0" />
    </nodedef>
  </template>

  <!--
    Node: <crossproduct>
    Perform a cross product of two vectors
  -->
  <nodedef name="ND_crossproduct_vector3" node="crossproduct" nodegroup="math">
    <input name="in1" type="vector3" value="0.0, 0.0, 0.0" />
    <input name="in2" type="vector3" value="0.0, 0.0, 0.0" />
    <output name="out" type="vector3" defaultinput="in1" />
  </nodedef>

  <!--
    Node: <transformpoint>
    Transform a vector3 coordinate from one named space to another.
  -->
  <nodedef name="ND_transformpoint_vector3" node="transformpoint" nodegroup="math">
    <input name="in" type="vector3" value="0.0, 0.0, 0.0" />
    <input name="fromspace" type="string" value="" uniform="true" />
    <input name="tospace" type="string" value="" uniform="true" />
    <output name="out" type="vector3" defaultinput="in" />
  </nodedef>

  <!--
    Node: <transformvector>
    Transform a vector from one named space to another.
  -->
  <nodedef name="ND_transformvector_vector3" node="transformvector" nodegroup="math">
    <input name="in" type="vector3" value="0.0, 0.0, 0.0" />
    <input name="fromspace" type="string" value="" uniform="true" />
    <input name="tospace" type="string" value="" uniform="true" />
    <output name="out" type="vector3" defaultinput="in" />
  </nodedef>
  <!--
    Node: <transformnormal>
    Transform a normal vector from one named space to another.
  -->
  <nodedef name="ND_transformnormal_vector3" node="transformnormal" nodegroup="math">
    <input name="in" type="vector3" value="0.0, 0.0, 1.0" />
    <input name="fromspace" type="string" value="" uniform="true" />
    <input name="tospace" type="string" value="" uniform="true" />
    <output name="out" type="vector3" defaultinput="in" />
  </nodedef>

  <!--
    Node: <transformmatrix>
    Transform a vector by a matrix.
  -->
  <nodedef name="ND_transformmatrix_vector2M3" node="transformmatrix" nodegroup="math">
    <input name="in" type="vector2" value="0.0, 0.0" />
    <input name="mat" type="matrix33" value="1.0,0.0,0.0, 0.0,1.0,0.0, 0.0,0.0,1.0" />
    <output name="out" type="vector2" defaultinput="in" />
  </nodedef>
  <nodedef name="ND_transformmatrix_vector3" node="transformmatrix" nodegroup="math">
    <input name="in" type="vector3" value="0.0, 0.0, 0.0" />
    <input name="mat" type="matrix33" value="1.0,0.0,0.0, 0.0,1.0,0.0, 0.0,0.0,1.0" />
    <output name="out" type="vector3" defaultinput="in" />
  </nodedef>
  <nodedef name="ND_transformmatrix_vector3M4" node="transformmatrix" nodegroup="math">
    <input name="in" type="vector3" value="0.0, 0.0, 0.0" />
    <input name="mat" type="matrix44" value="1.0,0.0,0.0,0.0, 0.0,1.0,0.0,0.0, 0.0,0.0,1.0,0.0, 0.0,0.0,0.0,1.0" />
    <output name="out" type="vector3" defaultinput="in" />
  </nodedef>
  <nodedef name="ND_transformmatrix_vector4" node="transformmatrix" nodegroup="math">
    <input name="in" type="vector4" value="0.0, 0.0, 0.0, 0.0" />
    <input name="mat" type="matrix44" value="1.0,0.0,0.0,0.0, 0.0,1.0,0.0,0.0, 0.0,0.0,1.0,0.0, 0.0,0.0,0.0,1.0" />
    <output name="out" type="vector4" defaultinput="in" />
  </nodedef>

  <!--
    Node: <normalmap>
    Transform a normal vector from object or tangent space into "world" space.
  -->
  <nodedef name="ND_normalmap_float" node="normalmap" nodegroup="math">
    <input name="in" type="vector3" value="0.5, 0.5, 1.0" />
    <input name="scale" type="float" value="1.0" />
    <input name="normal" type="vector3" defaultgeomprop="Nworld" />
    <input name="tangent" type="vector3" defaultgeomprop="Tworld" />
    <input name="bitangent" type="vector3" defaultgeomprop="Bworld" />
    <output name="out" type="vector3" defaultinput="normal" />
  </nodedef>
  <nodedef name="ND_normalmap_vector2" node="normalmap" nodegroup="math">
    <input name="in" type="vector3" value="0.5, 0.5, 1.0" />
    <input name="scale" type="vector2" value="1.0, 1.0" />
    <input name="normal" type="vector3" defaultgeomprop="Nworld" />
    <input name="tangent" type="vector3" defaultgeomprop="Tworld" />
    <input name="bitangent" type="vector3" defaultgeomprop="Bworld" />
    <output name="out" type="vector3" defaultinput="normal" />
  </nodedef>

  <!--
    Node: <hextilednormalmap> Supplemental Node
    Samples data from a single normalmap, with provisions for hex-tiling and randomizing the normalmap 
    across uv space.
  -->
  <nodedef name="ND_hextilednormalmap_vector3" node="hextilednormalmap" nodegroup="math">
    <input name="file" type="filename" value="" uniform="true" />
    <input name="default" type="vector3" value="0.5, 0.5, 1.0" />
    <input name="texcoord" type="vector2" defaultgeomprop="UV0" />
    <input name="tiling" type="vector2" value="1.0, 1.0" />
    <input name="rotation" type="float" value="1.0" />
    <input name="rotationrange" type="vector2" value="0.0, 360.0" />
    <input name="scale" type="float" value="1.0" />
    <input name="scalerange" type="vector2" value="0.5, 2.0" />
    <input name="offset" type="float" value="1.0" />
    <input name="offsetrange" type="vector2" value="0.0, 1.0" />
    <input name="falloff" type="float" value="0.5" />
    <input name="strength" type="float" value="1.0" />
    <input name="flip_g" type="boolean" value="false" />
    <input name="normal" type="vector3" defaultgeomprop="Nworld" />
    <input name="tangent" type="vector3" defaultgeomprop="Tworld" />
    <input name="bitangent" type="vector3" defaultgeomprop="Bworld" />
    <output name="out" type="vector3" default="0.5, 0.5, 1.0" />
  </nodedef>

  <!--
    Node: <transpose>
    Output the transpose of the incoming matrix.
  -->
  <template name="TP_ND_transpose" varName="typeName" options="matrix33, matrix44">
    <nodedef name="ND_transpose_@typeName@" node="transpose" nodegroup="math">
      <input name="in" type="@typeName@" value="Value:one" />
      <output name="out" type="@typeName@" defaultinput="in" />
    </nodedef>
  </template>

  <!--
    Node: <determinant>
    Output the determinant of the incoming matrix.
  -->
  <template name="TP_ND_determinant" varName="typeName" options="matrix33, matrix44">
    <nodedef name="ND_determinant_@typeName@" node="determinant" nodegroup="math">
      <input name="in" type="@typeName@" value="Value:one" />
      <output name="out" type="float" default="1.0" />
    </nodedef>
  </template>

  <!--
    Node: <invertmatrix>
    Invert an incoming matrix.
  -->
  <nodedef name="ND_invertmatrix_matrix33" node="invertmatrix" nodegroup="math">
    <input name="in" type="matrix33" value="1.0,0.0,0.0, 0.0,1.0,0.0, 0.0,0.0,1.0" />
    <output name="out" type="matrix33" defaultinput="in" />
  </nodedef>
  <nodedef name="ND_invertmatrix_matrix44" node="invertmatrix" nodegroup="math">
    <input name="in" type="matrix44" value="1.0,0.0,0.0,0.0, 0.0,1.0,0.0,0.0, 0.0,0.0,1.0,0.0, 0.0,0.0,0.0,1.0" />
    <output name="out" type="matrix44" defaultinput="in" />
  </nodedef>

  <!--
    Node: <rotate2d>
    Rotate a vector2 value about the origin.
  -->
  <nodedef name="ND_rotate2d_vector2" node="rotate2d" nodegroup="math">
    <input name="in" type="vector2" value="0.0, 0.0" />
    <input name="amount" type="float" value="0.0" unittype="angle" unit="degree" />
    <output name="out" type="vector2" defaultinput="in" />
  </nodedef>

  <!--
    Node: <rotate3d>
    Rotate a vector3 value about a specified unit axis vector
  -->
  <nodedef name="ND_rotate3d_vector3" node="rotate3d" nodegroup="math">
    <input name="in" type="vector3" value="0.0, 0.0, 0.0" />
    <input name="amount" type="float" value="0.0" unittype="angle" unit="degree" />
    <input name="axis" type="vector3" value="0.0, 1.0, 0.0" />
    <output name="out" type="vector3" defaultinput="in" />
  </nodedef>

  <!--
    Node: <place2d> Supplemental Node
    Transform incoming UV texture coordinates from one 2D frame of reference to another.
    operationorder (integer enum): the order in which to perform the transform operations.
    "0" or "SRT" performs -pivot, scale, rotate, translate, +pivot as per the original
    implementation matching the behavior of certain DCC packages, and "1" or "TRS" performs
    -pivot, translate, rotate, scale, +pivot which does not introduce texture shear.
    Default is 0 "SRT" for backward compatibility.
  -->
  <nodedef name="ND_place2d_vector2" node="place2d" nodegroup="math">
    <input name="texcoord" type="vector2" value="0.0, 0.0" />
    <input name="pivot" type="vector2" value="0.0,0.0" />
    <input name="scale" type="vector2" value="1.0,1.0" />
    <input name="rotate" type="float" value="0.0" unittype="angle" unit="degree" />
    <input name="offset" type="vector2" value="0.0,0.0" />
    <input name="operationorder" type="integer" value="0" enum="SRT, TRS" enumvalues="0, 1" />
    <output name="out" type="vector2" defaultinput="texcoord" />
  </nodedef>

  <!--
    Node: <trianglewave>
    Generate a triangle wave from the given scalar input.
    The generated wave ranges from zero to one and repeats on integer boundaries.
  -->
  <nodedef name="ND_trianglewave_float" node="trianglewave" nodegroup="math">
    <input name="in" type="float" value="0" />
    <output name="out" type="float" />
  </nodedef>

  <!--
    Node: <reflect>
    Compute the reflection vector given an incident vector and unit surface normal.
  -->
  <nodedef name="ND_reflect_vector3" node="reflect" nodegroup="math" doc="Compute the reflection vector">
    <input name="in" type="vector3" value="1.0, 0.0, 0.0" doc="Incident vector" />
    <input name="normal" type="vector3" defaultgeomprop="Nworld" doc="Surface normal" />
    <output name="out" type="vector3" />
  </nodedef>

  <!--
    Node: <refract>
    Compute the refraction vector given an incident vector, unit surface normal,
    and index of refraction.
  -->
  <nodedef name="ND_refract_vector3" node="refract" nodegroup="math" doc="Compute the refraction vector">
    <input name="in" type="vector3" value="1.0, 0.0, 0.0" doc="Incident vector" />
    <input name="normal" type="vector3" defaultgeomprop="Nworld" doc="Surface normal" />
    <input name="ior" type="float" value="1.0" doc="Index of refraction" />
    <output name="out" type="vector3" />
  </nodedef>

  <!-- ======================================================================== -->
  <!-- Adjustment nodes                                                         -->
  <!-- ======================================================================== -->

  <!--
    Node: <remap>
    Remap a value from one range of float/color/vector values to another.
  -->
  <template name="TP_ND_remap" varName="typeName" options="float, color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_remap_@typeName@" node="remap" nodegroup="adjustment">
      <input name="in" type="@typeName@" value="Value:zero" />
      <input name="inlow" type="@typeName@" value="Value:zero" />
      <input name="inhigh" type="@typeName@" value="Value:one" />
      <input name="outlow" type="@typeName@" value="Value:zero" />
      <input name="outhigh" type="@typeName@" value="Value:one" />
      <output name="out" type="@typeName@" defaultinput="in" />
    </nodedef>
  </template>

  <template name="TP_ND_remapFA" varName="typeName" options="color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_remap_@typeName@FA" node="remap" nodegroup="adjustment">
      <input name="in" type="@typeName@" value="Value:zero" />
      <input name="inlow" type="float" value="0.0" />
      <input name="inhigh" type="float" value="1.0" />
      <input name="outlow" type="float" value="0.0" />
      <input name="outhigh" type="float" value="1.0" />
      <output name="out" type="@typeName@" defaultinput="in" />
    </nodedef>
  </template>

  <!--
    Node: <smoothstep>
    Outputs a smooth (hermite-interpolated) remapping of input values from low-high
    to output 0-1.
  -->
  <template name="TP_ND_smoothstep" varName="typeName" options="float, color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_smoothstep_@typeName@" node="smoothstep" nodegroup="adjustment">
      <input name="in" type="@typeName@" value="Value:zero" />
      <input name="low" type="@typeName@" value="Value:zero" />
      <input name="high" type="@typeName@" value="Value:one" />
      <output name="out" type="@typeName@" defaultinput="in" />
    </nodedef>
  </template>

  <template name="TP_ND_smoothstepFA" varName="typeName" options="color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_smoothstep_@typeName@FA" node="smoothstep" nodegroup="adjustment">
      <input name="in" type="@typeName@" value="Value:zero" />
      <input name="low" type="float" value="0.0" />
      <input name="high" type="float" value="1.0" />
      <output name="out" type="@typeName@" defaultinput="in" />
    </nodedef>
  </template>


  <!--
    Node: <luminance>
    Output a grayscale image containing the luminance of the incoming RGB color in all color channels;
    the alpha channel is left unchanged if present.
  -->
  <template name="TP_ND_luminance" varName="typeName" options="color3, color4">
    <nodedef name="ND_luminance_@typeName@" node="luminance" nodegroup="adjustment">
      <input name="in" type="@typeName@" value="Value:zero" />
      <input name="lumacoeffs" type="color3" value="0.2722287, 0.6740818, 0.0536895" enum="acescg, rec709, rec2020, rec2100" enumvalues="0.2722287,0.6740818,0.0536895, 0.2126,0.7152,0.0722, 0.2627,0.6780,0.0593, 0.2627,0.6780,0.0593" />
      <output name="out" type="@typeName@" defaultinput="in" />
    </nodedef>
  </template>

  <!--
    Nodes: <rgbtohsv> and <hsvtorgb>
    Convert an incoming color between RGB and HSV space, with H and S ranging from 0-1.
  -->
  <template name="TP_ND_rgbtohsv" varName="typeName" options="color3, color4">
    <nodedef name="ND_rgbtohsv_@typeName@" node="rgbtohsv" nodegroup="adjustment">
      <input name="in" type="@typeName@" value="Value:zero" />
      <output name="out" type="@typeName@" defaultinput="in" />
    </nodedef>
  </template>
  <template name="TP_ND_hsvtorgb" varName="typeName" options="color3, color4">
    <nodedef name="ND_hsvtorgb_@typeName@" node="hsvtorgb" nodegroup="adjustment">
      <input name="in" type="@typeName@" value="Value:zero" />
      <output name="out" type="@typeName@" defaultinput="in" />
    </nodedef>
  </template>

  <!--
    Node: <contrast> Supplemental Node
    Increase or decrease contrast of a float/color value using a linear slope multiplier.
  -->
  <template name="TP_ND_contrast" varName="typeName" options="float, color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_contrast_@typeName@" node="contrast" nodegroup="adjustment">
      <input name="in" type="@typeName@" value="Value:zero" />
      <input name="amount" type="@typeName@" value="Value:one" />
      <input name="pivot" type="@typeName@" value="Value:half" />
      <output name="out" type="@typeName@" defaultinput="in" />
    </nodedef>
  </template>

  <template name="TP_ND_contrastFA" varName="typeName" options="color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_contrast_@typeName@FA" node="contrast" nodegroup="adjustment">
      <input name="in" type="@typeName@" value="Value:zero" />
      <input name="amount" type="float" value="1.0" />
      <input name="pivot" type="float" value="0.5" />
      <output name="out" type="@typeName@" defaultinput="in" />
    </nodedef>
  </template>

  <!--
    Node: <range> Supplemental Node
    Remap a value from one range of float/color/vector values to another, optionally
    applying a gamma correction in the middle, and optionally clamping output values.
  -->
  <template name="TP_ND_range" varName="typeName" options="float, color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_range_@typeName@" node="range" nodegroup="adjustment">
      <input name="in" type="@typeName@" value="Value:zero" />
      <input name="inlow" type="@typeName@" value="Value:zero" />
      <input name="inhigh" type="@typeName@" value="Value:one" />
      <input name="gamma" type="@typeName@" value="Value:one" />
      <input name="outlow" type="@typeName@" value="Value:zero" />
      <input name="outhigh" type="@typeName@" value="Value:one" />
      <input name="doclamp" type="boolean" value="false" />
      <output name="out" type="@typeName@" defaultinput="in" />
    </nodedef>
  </template>

  <template name="TP_ND_rangeFA" varName="typeName" options="color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_range_@typeName@FA" node="range" nodegroup="adjustment">
      <input name="in" type="@typeName@" value="Value:zero" />
      <input name="inlow" type="float" value="0.0" />
      <input name="inhigh" type="float" value="1.0" />
      <input name="gamma" type="float" value="1.0" />
      <input name="outlow" type="float" value="0.0" />
      <input name="outhigh" type="float" value="1.0" />
      <input name="doclamp" type="boolean" value="false" />
      <output name="out" type="@typeName@" defaultinput="in" />
    </nodedef>
  </template>

  <!--
    Node: <hsvadjust> Supplemental Node
    Adjust the hue, saturation and value of an RGB color by converting the input color
    to HSV, adding amount.x to the hue, multiplying the saturation by amount.y,
    multiplying the value by amount.z, then converting back to RGB.
  -->
  <template name="TP_ND_hsvadjust" varName="typeName" options="color3, color4">
    <nodedef name="ND_hsvadjust_@typeName@" node="hsvadjust" nodegroup="adjustment">
      <input name="in" type="@typeName@" value="Value:zero" />
      <input name="amount" type="vector3" value="0.0, 1.0, 1.0" />
      <output name="out" type="@typeName@" defaultinput="in" />
    </nodedef>
  </template>

  <!--
    Node: <saturate> Supplemental Node
    Adjust the saturation of a color using a linear interpolation between the incoming
    color and the grayscale luminance of the input computed using the provided luma
    coefficients; the alpha channel will be unchanged if present.
  -->
  <template name="TP_ND_saturate" varName="typeName" options="color3, color4">
    <nodedef name="ND_saturate_@typeName@" node="saturate" nodegroup="adjustment">
      <input name="in" type="@typeName@" value="Value:zero" />
      <input name="amount" type="float" value="1.0" />
      <input name="lumacoeffs" type="color3" value="0.2722287, 0.6740818, 0.0536895" enum="acescg, rec709, rec2020, rec2100" enumvalues="0.2722287,0.6740818,0.0536895, 0.2126,0.7152,0.0722, 0.2627,0.6780,0.0593, 0.2627,0.6780,0.0593" />
      <output name="out" type="@typeName@" defaultinput="in" />
    </nodedef>
  </template>

  <!--
    Node: <colorcorrect> Supplemental Node
    Combines various adjustment nodes into one, artist-friendly color correction node.
    The color4 signature does not touch the alpha channel.
  -->
  <template name="TP_ND_colorcorrect" varName="typeName" options="color3, color4">
    <nodedef name="ND_colorcorrect_@typeName@" node="colorcorrect" nodegroup="adjustment">
      <input name="in" type="@typeName@" uiname="Input Color" value="Value:one" doc="The input color to be adjusted." />
      <input name="hue" type="float" uiname="Hue" uisoftmin="0.0" uisoftmax="1.0" value="0" doc="Rotates the color hue, with values wrapping at 0-1 boundaries." />
      <input name="saturation" type="float" uiname="Saturation" uisoftmin="0.0" uisoftmax="1.0" value="1" doc="Adjusts the input color saturation level." />
      <input name="gamma" type="float" uiname="Gamma" uisoftmin="0.0" uisoftmax="3.0" value="1" doc="Applies a gamma correction to the color." />
      <input name="lift" type="float" uiname="Lift" uisoftmin="0.0" uisoftmax="1.0" value="0" doc="Raise the dark color values, leaving the white values unchanged." />
      <input name="gain" type="float" uiname="Gain" uisoftmin="0.0" uisoftmax="1.0" value="1" doc="Multiplier increases lighter color values, leaving black values unchanged." />
      <input name="contrast" type="float" uiname="Contrast" uisoftmin="0.0" uisoftmax="1.0" value="1" doc="Linearly increase or decrease the color contrast." />
      <input name="contrastpivot" type="float" uiname="Contrast Pivot" uisoftmin="0.0" uisoftmax="1.0" value="0.5" doc="Pivot value around which contrast applies. This value will not change as contrast is adjusted." />
      <input name="exposure" type="float" uiname="Exposure" uisoftmin="-1.0" uisoftmax="1.0" value="0" doc="Multiplier which increases or decreases color brightness by 2^value." />
      <output name="out" type="@typeName@" />
    </nodedef>
  </template>

  <!-- ======================================================================== -->
  <!-- Compositing nodes                                                        -->
  <!-- ======================================================================== -->

  <!--
    Node: <premult>
    Multiply the R or RGB channels of the input by the Alpha channel of the input.
  -->
  <nodedef name="ND_premult_color4" node="premult" nodegroup="compositing">
    <input name="in" type="color4" value="0.0, 0.0, 0.0, 1.0" />
    <output name="out" type="color4" defaultinput="in" />
  </nodedef>

  <!--
    Node: <unpremult>
    Divide the R or RGB channels of the input by the Alpha channel of the input.
    If the Alpha value is zero, it is passed through unchanged.
  -->
  <nodedef name="ND_unpremult_color4" node="unpremult" nodegroup="compositing">
    <input name="in" type="color4" value="0.0, 0.0, 0.0, 1.0" />
    <output name="out" type="color4" defaultinput="in" />
  </nodedef>

  <!--
    Node: <plus>
    Add two 1-4 channel inputs, with optional mixing between the bg input and the result.
  -->
  <template name="TP_ND_plus" varName="typeName" options="float, color3, color4">
    <nodedef name="ND_plus_@typeName@" node="plus" nodegroup="compositing">
      <input name="fg" type="@typeName@" value="Value:zero" />
      <input name="bg" type="@typeName@" value="Value:zero" />
      <input name="mix" type="float" value="1.0" />
      <output name="out" type="@typeName@" defaultinput="bg" />
    </nodedef>
  </template>

  <!--
    Node: <minus>
    Subtract two 1-4 channel inputs, with optional mixing between the bg input and the result.
  -->
  <template name="TP_ND_minus" varName="typeName" options="float, color3, color4">
    <nodedef name="ND_minus_@typeName@" node="minus" nodegroup="compositing">
      <input name="fg" type="@typeName@" value="Value:zero" />
      <input name="bg" type="@typeName@" value="Value:zero" />
      <input name="mix" type="float" value="1.0" />
      <output name="out" type="@typeName@" defaultinput="bg" />
    </nodedef>
  </template>

  <!--
    Node: <difference>
    Absolute-value difference of two 1-4 channel inputs, with optional mixing between
    the bg input and the result.
  -->
  <template name="TP_ND_difference" varName="typeName" options="float, color3, color4">
    <nodedef name="ND_difference_@typeName@" node="difference" nodegroup="compositing">
      <input name="fg" type="@typeName@" value="Value:zero" />
      <input name="bg" type="@typeName@" value="Value:zero" />
      <input name="mix" type="float" value="1.0" />
      <output name="out" type="@typeName@" defaultinput="bg" />
    </nodedef>
  </template>

  <!--
    Node: <burn>
    Take two 1-4 channel inputs and apply the same operator to all channels: 1-(1-B)/F
  -->
  <template name="TP_ND_burn" varName="typeName" options="float, color3, color4">
    <nodedef name="ND_burn_@typeName@" node="burn" nodegroup="compositing">
      <input name="fg" type="@typeName@" value="Value:zero" />
      <input name="bg" type="@typeName@" value="Value:zero" />
      <input name="mix" type="float" value="1.0" />
      <output name="out" type="@typeName@" defaultinput="bg" />
    </nodedef>
  </template>

  <!--
    Node: <dodge>
    Take two 1-4 channel inputs and apply the same operator to all channels: B/(1-F)
  -->
  <template name="TP_ND_dodge" varName="typeName" options="float, color3, color4">
    <nodedef name="ND_dodge_@typeName@" node="dodge" nodegroup="compositing">
      <input name="fg" type="@typeName@" value="Value:zero" />
      <input name="bg" type="@typeName@" value="Value:zero" />
      <input name="mix" type="float" value="1.0" />
      <output name="out" type="@typeName@" defaultinput="bg" />
    </nodedef>
  </template>

  <!--
    Node: <screen>
    Take two 1-4 channel inputs and apply the same operator to all channels: 1-(1-F)*(1-B)
  -->
  <template name="TP_ND_screen" varName="typeName" options="float, color3, color4">
    <nodedef name="ND_screen_@typeName@" node="screen" nodegroup="compositing">
      <input name="fg" type="@typeName@" value="Value:zero" />
      <input name="bg" type="@typeName@" value="Value:zero" />
      <input name="mix" type="float" value="1.0" />
      <output name="out" type="@typeName@" defaultinput="bg" />
    </nodedef>
  </template>

  <!--
    Node: <overlay>
    Take two 1-4 channel inputs and apply the same operator to all channels:
      2FB if B<0.5;
      1-2(1-F)(1-B) if B>=0.5
  -->
  <template name="TP_ND_overlay" varName="typeName" options="float, color3, color4">
    <nodedef name="ND_overlay_@typeName@" node="overlay" nodegroup="compositing">
      <input name="fg" type="@typeName@" value="Value:zero" />
      <input name="bg" type="@typeName@" value="Value:zero" />
      <input name="mix" type="float" value="1.0" />
      <output name="out" type="@typeName@" defaultinput="bg" />
    </nodedef>
  </template>

  <!--
    Node: <disjointover>
    Take two color4 inputs and use the built-in alpha
    channel(s) to control the compositing of the fg and bg inputs:
      F+B         if f+b<=1
      F+B(1-f)/b  if f+b>1
      alpha: min(f+b,1)
  -->
  <nodedef name="ND_disjointover_color4" node="disjointover" nodegroup="compositing">
    <input name="fg" type="color4" value="0.0, 0.0, 0.0, 0.0" />
    <input name="bg" type="color4" value="0.0, 0.0, 0.0, 0.0" />
    <input name="mix" type="float" value="1.0" />
    <output name="out" type="color4" defaultinput="bg" />
  </nodedef>

  <!--
    Node: <in>
    Take two color4 inputs and use the built-in alpha
    channel(s) to control the compositing of the fg and bg inputs: Fb  (alpha: fb)
  -->
  <nodedef name="ND_in_color4" node="in" nodegroup="compositing">
    <input name="fg" type="color4" value="0.0, 0.0, 0.0, 0.0" />
    <input name="bg" type="color4" value="0.0, 0.0, 0.0, 0.0" />
    <input name="mix" type="float" value="1.0" />
    <output name="out" type="color4" defaultinput="bg" />
  </nodedef>

  <!--
    Node: <mask>
    Take two color4 inputs and use the built-in alpha
    channel(s) to control the compositing of the fg and bg inputs: Bf  (alpha: bf)
  -->
  <nodedef name="ND_mask_color4" node="mask" nodegroup="compositing">
    <input name="fg" type="color4" value="0.0, 0.0, 0.0, 0.0" />
    <input name="bg" type="color4" value="0.0, 0.0, 0.0, 0.0" />
    <input name="mix" type="float" value="1.0" />
    <output name="out" type="color4" defaultinput="bg" />
  </nodedef>

  <!--
    Node: <matte>
    Take two color4 inputs and use the built-in alpha
    channel(s) to control the compositing of the fg and bg inputs: Ff+B(1-f)  (alpha: f+b(1-f))
  -->
  <nodedef name="ND_matte_color4" node="matte" nodegroup="compositing">
    <input name="fg" type="color4" value="0.0, 0.0, 0.0, 0.0" />
    <input name="bg" type="color4" value="0.0, 0.0, 0.0, 0.0" />
    <input name="mix" type="float" value="1.0" />
    <output name="out" type="color4" defaultinput="bg" />
  </nodedef>

  <!--
    Node: <out>
    Take two color4 inputs and use the built-in alpha
    channel(s) to control the compositing of the fg and bg inputs: F(1-b)  (alpha: f(1-b))
  -->
  <nodedef name="ND_out_color4" node="out" nodegroup="compositing">
    <input name="fg" type="color4" value="0.0, 0.0, 0.0, 0.0" />
    <input name="bg" type="color4" value="0.0, 0.0, 0.0, 0.0" />
    <input name="mix" type="float" value="1.0" />
    <output name="out" type="color4" defaultinput="bg" />
  </nodedef>

  <!--
    Node: <over>
    Take two color4 inputs and use the built-in alpha
    channel(s) to control the compositing of the fg and bg inputs: F+B(1-f)  (alpha: f+b(1-f))
  -->
  <nodedef name="ND_over_color4" node="over" nodegroup="compositing">
    <input name="fg" type="color4" value="0.0, 0.0, 0.0, 0.0" />
    <input name="bg" type="color4" value="0.0, 0.0, 0.0, 0.0" />
    <input name="mix" type="float" value="1.0" />
    <output name="out" type="color4" defaultinput="bg" />
  </nodedef>

  <!--
    Node: <inside>
    Take one 1-4 channel input "in" plus a separate float "mask" input and apply the same
    operator to all channels: in * mask
  -->
  <template name="TP_ND_inside" varName="typeName" options="float, color3, color4">
    <nodedef name="ND_inside_@typeName@" node="inside" nodegroup="compositing">
      <input name="in" type="@typeName@" value="Value:zero" />
      <input name="mask" type="float" value="1.0" />
      <output name="out" type="@typeName@" defaultinput="in" />
    </nodedef>
  </template>

  <!--
    Node: <outside>
    Take one 1-4 channel input "in" plus a separate float "mask" input and apply the same
    operator to all channels: in * (1-mask)
  -->
  <template name="TP_ND_outside" varName="typeName" options="float, color3, color4">
    <nodedef name="ND_outside_@typeName@" node="outside" nodegroup="compositing">
      <input name="in" type="@typeName@" value="Value:zero" />
      <input name="mask" type="float" value="0.0" />
      <output name="out" type="@typeName@" defaultinput="in" />
    </nodedef>
  </template>

  <!--
    Node: <mix>
    Mix two inputs according to an input mix amount.
  -->
  <template name="TP_ND_mix" varName="typeName" options="float, color3, color4, vector2, vector3, vector4, surfaceshader, displacementshader, volumeshader">
    <nodedef name="ND_mix_@typeName@" node="mix" nodegroup="compositing">
      <input name="fg" type="@typeName@" value="Value:zero" />
      <input name="bg" type="@typeName@" value="Value:zero" />
      <input name="mix" type="float" value="0.0" uisoftmin="0.0" uisoftmax="1.0" />
      <output name="out" type="@typeName@" defaultinput="bg" />
    </nodedef>
  </template>

  <template name="TP_ND_mix_self" varName="typeName" options="color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_mix_@typeName@_@typeName@" node="mix" nodegroup="compositing">
      <input name="fg" type="@typeName@" value="Value:zero" />
      <input name="bg" type="@typeName@" value="Value:zero" />
      <input name="mix" type="@typeName@" value="Value:zero" uisoftmin="Value:zero" uisoftmax="Value:one" />
      <output name="out" type="@typeName@" defaultinput="bg" />
    </nodedef>
  </template>

  <!-- ======================================================================== -->
  <!-- Conditional nodes                                                        -->
  <!-- ======================================================================== -->

  <!--
    Node: <ifgreater>
    Output the value of in1 if value1>value2, or the value of in2 if value1<=value2.
  -->
  <template name="TP_ND_ifgreater" varName="typeName" options="float, integer, color3, color4, vector2, vector3, vector4, matrix33, matrix44">
    <nodedef name="ND_ifgreater_@typeName@" node="ifgreater" nodegroup="conditional">
      <input name="value1" type="float" value="1.0" />
      <input name="value2" type="float" value="0.0" />
      <input name="in1" type="@typeName@" value="Value:zero" />
      <input name="in2" type="@typeName@" value="Value:zero" />
      <output name="out" type="@typeName@" defaultinput="in1" />
    </nodedef>
  </template>

  <nodedef name="ND_ifgreater_boolean" node="ifgreater" nodegroup="conditional">
    <input name="value1" type="float" value="1.0" />
    <input name="value2" type="float" value="0.0" />
    <output name="out" type="boolean" default="false" />
  </nodedef>

  <template name="TP_ND_ifgreater_I" varName="typeName" options="float, integer, color3, color4, vector2, vector3, vector4, matrix33, matrix44">
    <nodedef name="ND_ifgreater_@typeName@I" node="ifgreater" nodegroup="conditional">
      <input name="value1" type="integer" value="1" />
      <input name="value2" type="integer" value="0" />
      <input name="in1" type="@typeName@" value="Value:zero" />
      <input name="in2" type="@typeName@" value="Value:zero" />
      <output name="out" type="@typeName@" defaultinput="in1" />
    </nodedef>
  </template>

  <nodedef name="ND_ifgreater_booleanI" node="ifgreater" nodegroup="conditional">
    <input name="value1" type="integer" value="1" />
    <input name="value2" type="integer" value="0" />
    <output name="out" type="boolean" default="false" />
  </nodedef>

  <!--
    Node: <ifgreatereq>
    Output the value of in1 if value1>=value2, or the value of in2 if value1<value2.
  -->
  <template name="TP_ND_ifgreatereq" varName="typeName" options="float, integer, color3, color4, vector2, vector3, vector4, matrix33, matrix44">
    <nodedef name="ND_ifgreatereq_@typeName@" node="ifgreatereq" nodegroup="conditional">
      <input name="value1" type="float" value="1.0" />
      <input name="value2" type="float" value="0.0" />
      <input name="in1" type="@typeName@" value="Value:zero" />
      <input name="in2" type="@typeName@" value="Value:zero" />
      <output name="out" type="@typeName@" defaultinput="in1" />
    </nodedef>
  </template>

  <nodedef name="ND_ifgreatereq_boolean" node="ifgreatereq" nodegroup="conditional">
    <input name="value1" type="float" value="1.0" />
    <input name="value2" type="float" value="0.0" />
    <output name="out" type="boolean" default="false" />
  </nodedef>

  <template name="TP_ND_ifgreatereq_I" varName="typeName" options="float, integer, color3, color4, vector2, vector3, vector4, matrix33, matrix44">
    <nodedef name="ND_ifgreatereq_@typeName@I" node="ifgreatereq" nodegroup="conditional">
      <input name="value1" type="integer" value="1" />
      <input name="value2" type="integer" value="0" />
      <input name="in1" type="@typeName@" value="Value:zero" />
      <input name="in2" type="@typeName@" value="Value:zero" />
      <output name="out" type="@typeName@" defaultinput="in1" />
    </nodedef>
  </template>

  <nodedef name="ND_ifgreatereq_booleanI" node="ifgreatereq" nodegroup="conditional">
    <input name="value1" type="integer" value="1" />
    <input name="value2" type="integer" value="0" />
    <output name="out" type="boolean" default="false" />
  </nodedef>

  <!--
    Node: <ifequal>
    Output the value of in1 if value1==value2, or the value of in2 if value1!=value2.
  -->
  <template name="TP_ND_ifequal" varName="typeName" options="float, integer, color3, color4, vector2, vector3, vector4, matrix33, matrix44">
    <nodedef name="ND_ifequal_@typeName@" node="ifequal" nodegroup="conditional">
      <input name="value1" type="float" value="0.0" />
      <input name="value2" type="float" value="0.0" />
      <input name="in1" type="@typeName@" value="Value:zero" />
      <input name="in2" type="@typeName@" value="Value:zero" />
      <output name="out" type="@typeName@" defaultinput="in1" />
    </nodedef>
  </template>

  <nodedef name="ND_ifequal_boolean" node="ifequal" nodegroup="conditional">
    <input name="value1" type="float" value="1.0" />
    <input name="value2" type="float" value="0.0" />
    <output name="out" type="boolean" default="false" />
  </nodedef>

  <template name="TP_ND_ifequal_I" varName="typeName" options="float, integer, color3, color4, vector2, vector3, vector4, matrix33, matrix44">
    <nodedef name="ND_ifequal_@typeName@I" node="ifequal" nodegroup="conditional">
      <input name="value1" type="integer" value="0" />
      <input name="value2" type="integer" value="0" />
      <input name="in1" type="@typeName@" value="Value:zero" />
      <input name="in2" type="@typeName@" value="Value:zero" />
      <output name="out" type="@typeName@" defaultinput="in1" />
    </nodedef>
  </template>

  <nodedef name="ND_ifequal_booleanI" node="ifequal" nodegroup="conditional">
    <input name="value1" type="integer" value="1" />
    <input name="value2" type="integer" value="0" />
    <output name="out" type="boolean" default="false" />
  </nodedef>

  <template name="TP_ND_ifequal_B" varName="typeName" options="float, integer, color3, color4, vector2, vector3, vector4, matrix33, matrix44">
    <nodedef name="ND_ifequal_@typeName@B" node="ifequal" nodegroup="conditional">
      <input name="value1" type="boolean" value="false" />
      <input name="value2" type="boolean" value="false" />
      <input name="in1" type="@typeName@" value="Value:zero" />
      <input name="in2" type="@typeName@" value="Value:zero" />
      <output name="out" type="@typeName@" defaultinput="in1" />
    </nodedef>
  </template>

  <nodedef name="ND_ifequal_booleanB" node="ifequal" nodegroup="conditional">
    <input name="value1" type="boolean" value="false" />
    <input name="value2" type="boolean" value="false" />
    <output name="out" type="boolean" default="false" />
  </nodedef>

  <!--
    Node: <switch>
    Pass on the value of one of five input streams, according to the value of a selector parameter.
  -->
  <template name="TP_ND_switch" varName="typeName" options="float, color3, color4, vector2, vector3, vector4, matrix33, matrix44">
    <nodedef name="ND_switch_@typeName@" node="switch" nodegroup="conditional">
      <input name="in1" type="@typeName@" value="Value:zero" />
      <input name="in2" type="@typeName@" value="Value:zero" />
      <input name="in3" type="@typeName@" value="Value:zero" />
      <input name="in4" type="@typeName@" value="Value:zero" />
      <input name="in5" type="@typeName@" value="Value:zero" />
      <input name="in6" type="@typeName@" value="Value:zero" />
      <input name="in7" type="@typeName@" value="Value:zero" />
      <input name="in8" type="@typeName@" value="Value:zero" />
      <input name="in9" type="@typeName@" value="Value:zero" />
      <input name="in10" type="@typeName@" value="Value:zero" />
      <input name="which" type="float" value="0.0" />
      <output name="out" type="@typeName@" defaultinput="in1" />
    </nodedef>
  </template>

  <template name="TP_ND_switchI" varName="typeName" options="float, color3, color4, vector2, vector3, vector4, matrix33, matrix44">
    <nodedef name="ND_switch_@typeName@I" node="switch" nodegroup="conditional">
      <input name="in1" type="@typeName@" value="Value:zero" />
      <input name="in2" type="@typeName@" value="Value:zero" />
      <input name="in3" type="@typeName@" value="Value:zero" />
      <input name="in4" type="@typeName@" value="Value:zero" />
      <input name="in5" type="@typeName@" value="Value:zero" />
      <input name="in6" type="@typeName@" value="Value:zero" />
      <input name="in7" type="@typeName@" value="Value:zero" />
      <input name="in8" type="@typeName@" value="Value:zero" />
      <input name="in9" type="@typeName@" value="Value:zero" />
      <input name="in10" type="@typeName@" value="Value:zero" />
      <input name="which" type="integer" value="0" />
      <output name="out" type="@typeName@" defaultinput="in1" />
    </nodedef>
  </template>


  <!-- ======================================================================== -->
  <!-- Channel nodes                                                            -->
  <!-- ======================================================================== -->

  <!--
    Node: <convert>
    Convert a stream from one type to another; only certain unambiguous conversion
    types are supported.
  -->
  <template name="TP_ND_convert_float" varName="typeName" options="color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_convert_float_@typeName@" node="convert" nodegroup="channel">
      <input name="in" type="float" value="0.0" />
      <output name="out" type="@typeName@" default="Value:zero" />
    </nodedef>
  </template>

  <template name="TP_ND_convert_color3" varName="typeName" options="color4, vector2, vector3, vector4">
    <nodedef name="ND_convert_color3_@typeName@" node="convert" nodegroup="channel">
      <input name="in" type="color3" value="0.0, 0.0, 0.0" />
      <output name="out" type="@typeName@" default="Value:zero" />
    </nodedef>
  </template>

  <template name="TP_ND_convert_color4" varName="typeName" options="color3, vector2, vector3, vector4">
    <nodedef name="ND_convert_color4_@typeName@" node="convert" nodegroup="channel">
      <input name="in" type="color4" value="0.0, 0.0, 0.0, 0.0" />
      <output name="out" type="@typeName@" default="Value:zero" />
    </nodedef>
  </template>

  <template name="TP_ND_convert_vector2" varName="typeName" options="color3, color4, vector3, vector4">
    <nodedef name="ND_convert_vector2_@typeName@" node="convert" nodegroup="channel">
      <input name="in" type="vector2" value="0.0, 0.0" />
      <output name="out" type="@typeName@" default="Value:zero" />
    </nodedef>
  </template>

  <template name="TP_ND_convert_vector3" varName="typeName" options="color3, color4, vector2, vector4">
    <nodedef name="ND_convert_vector3_@typeName@" node="convert" nodegroup="channel">
      <input name="in" type="vector3" value="0.0, 0.0, 0.0" />
      <output name="out" type="@typeName@" default="Value:zero" />
    </nodedef>
  </template>

  <template name="TP_ND_convert_vector4" varName="typeName" options="color3, color4, vector2, vector3">
    <nodedef name="ND_convert_vector4_@typeName@" node="convert" nodegroup="channel">
      <input name="in" type="vector4" value="0.0, 0.0, 0.0, 0.0" />
      <output name="out" type="@typeName@" default="Value:zero" />
    </nodedef>
  </template>

  <template name="TP_ND_convert_boolean" varName="typeName" options="float, color3, color4, vector2, vector3, vector4, integer">
    <nodedef name="ND_convert_boolean_@typeName@" node="convert" nodegroup="channel">
      <input name="in" type="boolean" value="false" />
      <output name="out" type="@typeName@" default="Value:zero" />
    </nodedef>
  </template>

  <template name="TP_ND_convert_integer" varName="typeName" options="float, color3, color4, vector2, vector3, vector4, boolean">
    <nodedef name="ND_convert_integer_@typeName@" node="convert" nodegroup="channel">
      <input name="in" type="integer" value="0" />
      <output name="out" type="@typeName@" default="Value:zero" />
    </nodedef>
  </template>

  <template name="TP_ND_convert_surfaceshader" varName="typeName" options="float, color3, color4, vector2, vector3, vector4, integer, boolean">
    <nodedef name="ND_convert_@typeName@_surfaceshader" node="convert" version="1.0" isdefaultversion="true" nodegroup="shader" doc="Convert @typeName@ to shader">
      <input name="in" type="@typeName@" value="Value:zero" />
      <output name="out" type="surfaceshader" />
    </nodedef>
  </template>

  <!--
    Node: <combine2>
    Combine the channels from two streams into the same number of channels of a
    single output stream of a specified compatible type.
  -->
  <nodedef name="ND_combine2_vector2" node="combine2" nodegroup="channel">
    <input name="in1" type="float" value="0.0" />
    <input name="in2" type="float" value="0.0" />
    <output name="out" type="vector2" default="0.0, 0.0" />
  </nodedef>
  <nodedef name="ND_combine2_color4CF" node="combine2" nodegroup="channel">
    <input name="in1" type="color3" value="0.0, 0.0, 0.0" />
    <input name="in2" type="float" value="0.0" />
    <output name="out" type="color4" default="0.0, 0.0, 0.0, 0.0" />
  </nodedef>
  <nodedef name="ND_combine2_vector4VF" node="combine2" nodegroup="channel">
    <input name="in1" type="vector3" value="0.0, 0.0, 0.0" />
    <input name="in2" type="float" value="0.0" />
    <output name="out" type="vector4" default="0.0, 0.0, 0.0, 0.0" />
  </nodedef>
  <nodedef name="ND_combine2_vector4VV" node="combine2" nodegroup="channel">
    <input name="in1" type="vector2" value="0.0, 0.0" />
    <input name="in2" type="vector2" value="0.0, 0.0" />
    <output name="out" type="vector4" default="0.0, 0.0, 0.0, 0.0" />
  </nodedef>

  <!--
    Node: <combine3>
    Combine the channels from three streams into the same number of channels of a
    single output stream of a specified compatible type.
  -->
  <template name="TP_ND_combine3" varName="typeName" options="color3, vector3">
    <nodedef name="ND_combine3_@typeName@" node="combine3" nodegroup="channel">
      <input name="in1" type="float" value="0.0" />
      <input name="in2" type="float" value="0.0" />
      <input name="in3" type="float" value="0.0" />
      <output name="out" type="@typeName@" default="Value:zero" />
    </nodedef>
  </template>

  <!--
    Node: <combine4>
    Combine the channels from four streams into the same number of channels of a
    single output stream of a specified compatible type.
  -->
  <template name="TP_ND_combine4" varName="typeName" options="color4, vector4">
    <nodedef name="ND_combine4_@typeName@" node="combine4" nodegroup="channel">
      <input name="in1" type="float" value="0.0" />
      <input name="in2" type="float" value="0.0" />
      <input name="in3" type="float" value="0.0" />
      <input name="in4" type="float" value="0.0" />
      <output name="out" type="@typeName@" default="Value:zero" />
    </nodedef>
  </template>

  <!--
    Node <creatematrix>
    Combine the the three vectors3 from stream into a matrix 33.
  -->
  <nodedef name="ND_creatematrix_vector3_matrix33" node="creatematrix" nodegroup="math">
    <input name="in1" type="vector3" value="1.0, 0.0, 0.0" />
    <input name="in2" type="vector3" value="0.0, 1.0, 0.0" />
    <input name="in3" type="vector3" value="0.0, 0.0, 1.0" />
    <output name="out" type="matrix33" default="1.0, 0.0, 0.0,  0.0, 1.0, 0.0,  0.0, 0.0, 1.0" />
  </nodedef>

  <nodedef name="ND_creatematrix_vector3_matrix44" node="creatematrix" nodegroup="math">
    <input name="in1" type="vector3" value="1.0, 0.0, 0.0" />
    <input name="in2" type="vector3" value="0.0, 1.0, 0.0" />
    <input name="in3" type="vector3" value="0.0, 0.0, 1.0" />
    <input name="in4" type="vector3" value="0.0, 0.0, 0.0" />
    <output name="out" type="matrix44" default="1.0, 0.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0,  0.0, 0.0, 1.0, 0.0,  0.0, 0.0, 0.0, 1.0" />
  </nodedef>

  <nodedef name="ND_creatematrix_vector4_matrix44" node="creatematrix" nodegroup="math">
    <input name="in1" type="vector4" value="1.0, 0.0, 0.0, 0.0" />
    <input name="in2" type="vector4" value="0.0, 1.0, 0.0, 0.0" />
    <input name="in3" type="vector4" value="0.0, 0.0, 1.0, 0.0" />
    <input name="in4" type="vector4" value="0.0, 0.0, 0.0, 1.0" />
    <output name="out" type="matrix44" default="1.0, 0.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0,  0.0, 0.0, 1.0, 0.0,  0.0, 0.0, 0.0, 1.0" />
  </nodedef>

  <!--
    Node: <extract>
    Extract a single channel from a colorN or vectorN stream, outputting a float.
  -->
  <nodedef name="ND_extract_color3" node="extract" nodegroup="channel">
    <input name="in" type="color3" value="0.0, 0.0, 0.0" />
    <input name="index" type="integer" value="0" uimin="0" uimax="2" uniform="true" />
    <output name="out" type="float" default="0.0" />
  </nodedef>
  <nodedef name="ND_extract_color4" node="extract" nodegroup="channel">
    <input name="in" type="color4" value="0.0, 0.0, 0.0, 0.0" />
    <input name="index" type="integer" value="0" uimin="0" uimax="3" uniform="true" />
    <output name="out" type="float" default="0.0" />
  </nodedef>
  <nodedef name="ND_extract_vector2" node="extract" nodegroup="channel">
    <input name="in" type="vector2" value="0.0, 0.0" />
    <input name="index" type="integer" value="0" uimin="0" uimax="1" uniform="true" />
    <output name="out" type="float" default="0.0" />
  </nodedef>
  <nodedef name="ND_extract_vector3" node="extract" nodegroup="channel">
    <input name="in" type="vector3" value="0.0, 0.0, 0.0" />
    <input name="index" type="integer" value="0" uimin="0" uimax="2" uniform="true" />
    <output name="out" type="float" default="0.0" />
  </nodedef>
  <nodedef name="ND_extract_vector4" node="extract" nodegroup="channel">
    <input name="in" type="vector4" value="0.0, 0.0, 0.0, 0.0" />
    <input name="index" type="integer" value="0" uimin="0" uimax="3" uniform="true" />
    <output name="out" type="float" default="0.0" />
  </nodedef>


  <!--
    Node: <separate2>, <separate3>, <separate4> Supplemental Nodes
    Output each of the channels of a color/vector stream as a separate float output.
  -->
  <nodedef name="ND_separate2_vector2" node="separate2" nodegroup="channel">
    <input name="in" type="vector2" value="0.0, 0.0" />
    <output name="outx" type="float" default="0.0" />
    <output name="outy" type="float" default="0.0" />
  </nodedef>
  <nodedef name="ND_separate3_color3" node="separate3" nodegroup="channel">
    <input name="in" type="color3" value="0.0, 0.0, 0.0" />
    <output name="outr" type="float" default="0.0" />
    <output name="outg" type="float" default="0.0" />
    <output name="outb" type="float" default="0.0" />
  </nodedef>
  <nodedef name="ND_separate3_vector3" node="separate3" nodegroup="channel">
    <input name="in" type="vector3" value="0.0, 0.0, 0.0" />
    <output name="outx" type="float" default="0.0" />
    <output name="outy" type="float" default="0.0" />
    <output name="outz" type="float" default="0.0" />
  </nodedef>
  <nodedef name="ND_separate4_color4" node="separate4" nodegroup="channel">
    <input name="in" type="color4" value="0.0, 0.0, 0.0, 0.0" />
    <output name="outr" type="float" default="0.0" />
    <output name="outg" type="float" default="0.0" />
    <output name="outb" type="float" default="0.0" />
    <output name="outa" type="float" default="0.0" />
  </nodedef>
  <nodedef name="ND_separate4_vector4" node="separate4" nodegroup="channel">
    <input name="in" type="vector4" value="0.0, 0.0, 0.0, 0.0" />
    <output name="outx" type="float" default="0.0" />
    <output name="outy" type="float" default="0.0" />
    <output name="outz" type="float" default="0.0" />
    <output name="outw" type="float" default="0.0" />
  </nodedef>

  <!-- ======================================================================== -->
  <!-- Convolution nodes                                                        -->
  <!-- ======================================================================== -->

  <!--
    Node: <blur>
    A gaussian-falloff blur.
  -->
  <template name="TP_ND_blur" varName="typeName" options="float, color3, color4, vector2, vector3, vector4">
    <nodedef name="ND_blur_@typeName@" node="blur" nodegroup="convolution2d">
      <input name="in" type="@typeName@" value="Value:zero" />
      <input name="size" type="float" value="0.0" />
      <input name="filtertype" type="string" value="box" enum="box,gaussian" uniform="true" />
      <output name="out" type="@typeName@" defaultinput="in" />
    </nodedef>
  </template>

  <!--
    Node: <heighttonormal>
    Convert a scalar height map to a normal map of type vector3.
  -->
  <nodedef name="ND_heighttonormal_vector3" node="heighttonormal" nodegroup="convolution2d">
    <input name="in" type="float" value="0.0" />
    <input name="scale" type="float" value="1.0" uimin="0.0" uisoftmax="5.0"/>
    <input name="texcoord" type="vector2" defaultgeomprop="UV0" />
    <output name="out" type="vector3" default="0.5, 0.5, 1.0" />
  </nodedef>

  <!-- ======================================================================== -->
  <!-- Logical operator nodes                                                   -->
  <!-- ======================================================================== -->

  <!--
    Node: <and>
    Logical And operation for two boolean values.
  -->
  <nodedef name="ND_logical_and" node="and" nodegroup="conditional">
    <input name="in1" type="boolean" value="false" />
    <input name="in2" type="boolean" value="false" />
    <output name="out" type="boolean" defaultinput="in1" />
  </nodedef>

  <!--
    Node: <or>
    Logical Inclusive Or operation for two boolean values.
  -->
  <nodedef name="ND_logical_or" node="or" nodegroup="conditional">
    <input name="in1" type="boolean" value="false" />
    <input name="in2" type="boolean" value="false" />
    <output name="out" type="boolean" defaultinput="in1" />
  </nodedef>

  <!--
    Node: <xor>
    Logical Exclusive Or operation for two boolean values.
  -->
  <nodedef name="ND_logical_xor" node="xor" nodegroup="conditional">
    <input name="in1" type="boolean" value="false" />
    <input name="in2" type="boolean" value="false" />
    <output name="out" type="boolean" defaultinput="in1" />
  </nodedef>

  <!--
    Node: <not>
    Returns logical Not of input.
  -->
  <nodedef name="ND_logical_not" node="not" nodegroup="conditional">
    <input name="in" type="boolean" value="false" />
    <output name="out" type="boolean" default="true"/>
  </nodedef>

  <!-- ======================================================================== -->
  <!-- Organization nodes                                                       -->
  <!-- ======================================================================== -->

  <!--
    Node: <dot>
    No-op; passes its input to the output unchanged.
  -->
  <template name="TP_ND_dot" varName="typeName" options="float, color3, color4, vector2, vector3, vector4, boolean, integer, matrix33, matrix44, filename, string, surfaceshader, displacementshader, volumeshader, lightshader">
    <nodedef name="ND_dot_@typeName@" node="dot" nodegroup="organization">
      <input name="in" type="@typeName@" value="Value:zero" />
      <input name="note" type="string" value="" uniform="true" />
      <output name="out" type="@typeName@" defaultinput="in" />
    </nodedef>
  </template>

</materialx>
