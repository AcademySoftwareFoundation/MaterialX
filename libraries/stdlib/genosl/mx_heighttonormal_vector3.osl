void mx_heighttonormal_vector3(float height, float scale, vector2 texcoord, output vector result)
{
    // Scale factor for parity with traditional Sobel filtering.
    float SOBEL_SCALE_FACTOR = 1.0 / 16.0;

    // Compute screen-space gradients of the heightfield and texture coordinates.
    vector2 dHdS = vector2(Dx(height), Dy(height)) * scale * SOBEL_SCALE_FACTOR;
    vector2 dUdS = vector2(Dx(texcoord.x), Dy(texcoord.x));
    vector2 dVdS = vector2(Dx(texcoord.y), Dy(texcoord.y));

    // Construct a screen-space tangent frame.
    vector tangent = vector(dUdS.x, dVdS.x, dHdS.x);
    vector bitangent = vector(dUdS.y, dVdS.y, dHdS.y);
    vector n = cross(tangent, bitangent);

    // Handle invalid and mirrored texture coordinates.
    if (dot(n, n) < M_FLOAT_EPS * M_FLOAT_EPS)
    {
        n = vector(0, 0, 1);
    }
    else if (n[2] < 0.0)
    {
        n *= -1.0;
    }

    // Normalize and encode the results.
    result = normalize(n) * 0.5 + 0.5;
}
